openapi: 3.0.2
info:
  title: CRM CareCloud REST API
  version: 1.0.0
  license:
    name: EULA
    url: 'https://www.crmcarecloud.com/'
  x-logo:
    url: 'https://cdn.carecloud.cz/static/carecloud_blue.svg'
    altText: CRM CareCloud
  description: "Learn here the basics of the Customer Data Platform CareCloud API, from authentication to usage of available resources. Learn about the CDP CareCloud REST API, which Systems can use API to connect with CDP CareCloud. Like e-shops, POS, kiosks, booking, and other similar production systems. These systems usually process the customer data sets with their relationships or end-user applications like mobile Android and iOS APPs or web microsites that need to get the unique customer data.\n\n#### [Getting started](#section/Getting-started)\n\nThis is the description of the basics of the CDP CareCloud API. It is desribed here the [domain structure](#section/Getting-started/Domain-structure) and the parameters of the URL, the difference between  Enterprise  and  Customer API, [HTTP methods](#section/Getting-started/HTTPS-Methods) used in the API, [authentication details](#section/Authentication) and more.\n\n#### [CRM CareCloud API Reference](#section/CRM-CareCloud-API-Reference)\n\n[CRM CareCloud API Reference](#section/CRM-CareCloud-API-Reference) describes each available [Resource](#section/CRM-CareCloud-API-Reference/Available-resources-overview) in the API, you can learn more about parameters, errors, and how to format your requests. Review all available resources for CRM CareCloud REST API with this reference overview.\n\n# Getting started\n\nCRM CareCloud REST API allows you to create and manage the customer accounts and related resources like countries, languages, currencies, sources or customer account statuses. You can use the API for management of vouchers, rewards, customer cards, segments and other structures related to customer account.\n\n## Domain structure\n\nThe domain structure is like  `<projectURL>`/customer-interface/v1.0/customers where  `<projectURL>`  corresponds to the specific URL of your project. For example for project of company called Cortex, the  `<projectURL>`  could be https://cortex.crmcarecloud.com/webservice/rest-api/ or local URL https://project.carecloud.cz/webservice/rest-api/ or any other similar URL. REST API is available only through secure protocol HTTPS.\n\nWe have created and described two API types, where the main difference is the authentication method and the purpose of the systems for which the API is created.\n\n### Enterprise API\n\nThe  Enterprise interface client authenticates with login and password. The Enterprise API is mainly created for e-shops, POS, kiosks, booking and other similar production systems which needs to get the data lists.\nThe domain structure for Enterprise interface API is like  `<projectURL>`/enterprise-interface/v1.0/customers, where :\n\n-   `<projectURL>`  the specific URL of your project\n-   `enterprise-interface`  represents the type of API\n-   `v1.0`  is the version of the API (this is only example, please the check actual version with your integration support)\n-   `customers`  is an example of the resource. List of resources is available in  CRM CareCloud API Reference\n\n### Customer API\n\nThe  Customer interface client authenticates  with user name and token. The Customer API is created and used mainly for end user applications like mobile Android and iOS APPs or web customer microsites which needs to get the unique customer data.\nThe domain structure for the Customer interface API is like  `<projectURL>`/customer-interface/v1.0/customers\nWhere :\n\n-   `<projectURL>`  the specific URL of your project\n-   `customer-interface`  represents the type of API\n-   `v1.0`  is the version of the API (this is only example, please check the actual version with your integration support)\n-   `customers`  is an example of the resource. List of resources is available in  CRM CareCloud API Reference\n\n## API call parameters\n\nEvery API call has the following parameters:\n\n-   Path - contains domain, version, resource, identifier of resource, subresource and the subresource unique id: https://project.crmcarecloud.com/webservice/rest-api/customer-interface/v1.0/resource-name/resource_id/actions/action_id\n-   Query string - uses as filter for results, pagination and limitation of results\n-   Request body - contains structures for methods POST, PUT\n-   Response body - contains all result data (resources or error information) in  standard response structure\n\n## HTTPS Methods\n\nREST API is available only through the secure protocol HTTPS. CRM CareCloud REST API uses selection of the basic HTTP methods:\n\nMake a `GET ` request to retrieve data depending on URI and query string\n\n`POST ` is used to create new resources, we use it also for some action calls\n\n`PUT` method is used to update a resource specified by the unique id\n\nMethod `DELETE` removes a resource specified by the unique id. This method is provided just by some specific resources.\n\n## API versioning\n\nVersioning of the API has the following pattern:\n`<vX.Y>`\nwhere:\n\n-   X represents the major version. The major version serial number increases when an incompatible API changes are made.\n-   Y represents the minor version. The minor version serial number increases when we add a functionality in a backwards-compatible manner\n\nIf developers fix issues in the API a changelog report is published. Changelog contains a version of the API, date and description of the fix.\n\n## Actions\n\nIn special cases, if it is not possible to follow the RESTful way, we use the procedural call. We call it Action. It is possible the Action to be called by existing resources as in the example below.\n\nPOST  `<projectURL>`/customer-interface/v1.0/resource-name/resource_id/actions/action_id\n\nWhere ‘resource-name’ represents a resource with its unique id - resource_id. Keyword actions identifies an action call and action_id is a unique id of the action that is represented by name of the action. Action name is unique across the API.\n\nThis is the example of the action “add customer” by resource segments:\n\nPOST  `<projectURL>`/customer-interface/v1.0/segments/{segment_id}/actions/add-customer\n\n## Status codes\n\nStatus codes represent a status of the API response.\n\n| Success status code | Description |\n| ----------- | ----------- |\n| 200 OK | Successful |\n| 201 Created | Resource was created |\n| 204 No Content | In case of the success without any response data |\n\n| Error status code | Description |\n| ----------- | ----------- |\n| 400 Bad Request | Bad input parameter. Error message specifies the detail |\n| 401 Unauthorized | The client has invalid credentials or auth token |\n| 403 Forbidden | The client does not exist or the client tried to access non authorized property/resource |\n| 404 Not Found | The resource was not found |\n| 405 Method Not Allowed | The resource does not support the specified HTTP method |\n| 429 Too Many Requests | Too many requests - more than the resource limit |\n| 500 Internal Server Error | Server is not working as expected |\n| 503 Service Unavailable | Temporary state when the service is temporarily unavailable, overloaded or there is a maintenance window |\n\n## Language version\n\nIt is used, when the integrator needs to get the right language version of the requested information (like name, description or note). To be able to identify the language version it is necessary to set HTTP header field accept-language.\n\n```http request\nGET / HTTP/1.1\nHost: project.crmcarecloud.com\nAccept-Language: cs\n```\n\n## Read-only parameters\n\nThese kinds of parameters are used only in response to API calls, and they should not be set in the request body of the API call. Please avoid using them during use POST or PUT HTTP method. Every data structure parameter is marked in documentation, so you can see if parameter is read only or not.\n\n## Mandatory parameters\n\nIf a parameter is marked as mandatory in the documentation, it has to be used in API calls. If a parent structure is not mandatory and you won't use it, child parameters of that structure won't be required. If you use the parent structure in the API call, all child parameters that are marked as mandatory will be required. Every data structure parameter is marked in the documentation, so you can see if the parameter is mandatory or not.\n\n# Authorization\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Use cases\n\n## Authentication and login process for customer interface\n\n1. Get `<user name>` from your account manager. It is usually `customer_interface` for the customer interface, but it might be different depending on the project.<br/>\n2. Create a token using the method  [[POST] /tokens](#operation/postToken).\n   The creation of a token is different from other API calls.  HTTP Authorization header contains only a login name and no token (because it doesn't exist yet).\n```http request\n<user name>:\n ```\nValue of HTTP header Authentication contains BASE64 encoded string `<user name>:`. The request looks like this:\n\n```http request\nPOST <projectURL>/rest-api/customer-interface/v1.0/tokens\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOiA=\n```\n3. You will get a token_id as a response.\n```json\n{\n  \"data\":{\n    \"token_id\":<token_id>\n  }\n}\n```\n4. The next step is to put together the user name and token in the HTTP Authorization header. The value of the header has to be BASE 64 encoded.\n```http request\n<user name>:<token_id>\n```\nHTTP Authorization header looks similar to:\n```http request\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOiA=\n```\n5. For the customer login use the method [[POST] /tokens/{token_id}/actions/login](#operation/postTokenLogin). Remember to set `<token_id>` in the  HTTP Authorization header as is in step nr. 4. Put right customer credentials in the request's body after.\n\n<p class=\"warning\"> Note: Do not copy the credentials below. Code is just an example of a method used.</p>\n\n```json\n{\n  \"login_type\": \"email\",\n  \"login_value\": \"example@crmcarecloud.com\",\n  \"password\": \"password_example\"\n}\n```\n6. You will receive the customer_id of the logged-in customer as a response.\n```json\n{\n  \"data\":{\n    \"customer_id\":<customer_id>\n  }\n}\n```\n\n## Creation of a customer account process\n\n1. You should know all the values for the required/optional customer account parameters before creating a customer account by [[POST] /customers](#operation/postCustomer). Use any available resource you need to get the lists of actual values. We will use resource stores in this example. To get all options for `store_id` you should call [[GET] /stores](#operation/getStores). Parameter `store_id` will be set during the customer account creation process.\n```http request\nGET <projectURL>/rest-api/customer-interface/v1.0/stores\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<token>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n2. You will get a response containing the list of stores and their unique IDs.\n```json\n{\n   \"data\": {\n      \"stores\": [\n         {\n            \"store_id\": \"86e05affc7a7abefcd513ab400\",\n            \"store_code\": \"\",\n            \"name\": \"Great Pub\",\n            \"store_address\": {\n               \"address1\": \"Old Town Square\",\n               \"address2\": \"34\",\n               \"address3\": \"\",\n               \"address4\": \"\",\n               \"address5\": \"\",\n               \"address6\": \"\",\n               \"address7\": \"\",\n               \"zip\": \"11000\",\n               \"city\": \"Prague 1\",\n               \"country_code\": \"cz\"\n            },\n            \"contact_email\": \"\",\n            \"manager_name\": \"\",\n            \"phone_number\": \"\",\n            \"partner_id\": \"86e05affc7a7abefcd513ab400\",\n            \"system_id\": 2375303497,\n            \"gps_coordinates\": {\n               \"gps_longitude\": 0,\n               \"gps_latitude\": 0\n            },\n            \"url_address\": \"\",\n            \"opening\": [ ],\n            \"image_urls\": [ ],\n            \"visibility_for_customer\": 1,\n            \"short_description\": \"fdsfdsfds\",\n            \"description\": null,\n            \"registration_id\": 123,\n            \"last_change\": \"2018-12-19 16:12:56\",\n            \"state\": 1\n         }\n      ],\n      \"total_items\": 1\n   }\n}\n```\n\n3. You will get a response containing the list of stores and their unique IDs.\n   Use the method [[POST] /customers](#operation/postCustomer) to create a customer account and set `store_id` as the registration branch of a customer account.\n   </br>Header:\n```http request\nPOST <projectURL>/rest-api/customer-interface/v1.0/customers\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<token>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\nRequest body:\n```json\n{\n   \"customer\": {\n      \"personal_information\": {\n         \"gender\": 1,\n         \"first_name\": \"John\",\n         \"last_name\": \"Smith\",\n         \"birthdate\": \"985-02-12\",\n         \"email\": \"happy_customer@crmcarecloud.com\",\n         \"phone\": 420523828931,\n         \"language_id\": \"en\",\n         \"store_id\": \"8bed991c68a4\",\n         \"photo_url\": null,\n         \"address\": {\n            \"address1\": \"Old Town Square\",\n            \"address2\": \"34\",\n            \"address3\": \"\",\n            \"address4\": \"\",\n            \"address5\": \"\",\n            \"address6\": \"\",\n            \"address7\": \"\",\n            \"zip\": \"11000\",\n            \"city\": \"Prague 1\",\n            \"country_code\": \"cz\"\n         },\n         \"agreement\": {\n            \"agreement_gtc\": 1,\n            \"agreement_profiling\": 1,\n            \"agreement_marketing_communication\": 1,\n            \"custom_agreements\": [\n               {\n                  \"agreement_id\": \"custom_agreement_id\",\n                  \"agreement_value\": 2\n               }\n            ]\n         }\n      }\n   },\n   \"customer_source\": {\n      \"customer_source_id\": \"8fdce3475560d56e95a6ab035r\",\n      \"external_id\": null\n   },\n   \"password\": \"password_example\",\n   \"autologin\": true,\n   \"social_network_credentials\": {\n      \"social_network_id\": \"twitter\",\n      \"social_network_token\": \"38e123j1jedu12d1jnjqwd\"\n   }\n}\n```\n\n4. Set all the parameters according to the documentation and get a response including `customer_id`.\n```json\n{\n    \"data\":{\n        \"customer_id\":\"89ac83ca207a820c62c79bf03a\"\n    }\n}\n```\n\n5. Customers subresources can be set during the process of a customer account creation. Customer's interests and properties will be set in the next steps. Lists of all available interests and properties are available using the [[GET] /interests](#operation/getInterests) and [[GET] /customer-properties](#operation/getCustomerProperties).\n6. To save a value of interest on a customer account use the interest-records subresource [[POST] /customers/{customer_id}/interest-records/](#operation/postSubCustomerInterest) as follows:\n```http request\nPOST <projectURL>/rest-api/customer-interface/v1.0/customers/89ac83ca207a820c62c79bf03a/interst-records\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<token>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n```json\n{\n   \"interest_record\": {\n      \"interest_id\": \"81eaeea13b8984a169c490a325\",\n      \"customer_id\": \"89ac83ca207a820c62c79bf03a\"\n   }\n}\n```\n\n6. You will get a response including the interest record unique id.\n```json\n{\n   \"data\": {\n      \"interest_record_id\": \"87d934c86a6303f5fb4d1214fb\"\n   }\n}\n```\n\n7. Use a similar process to set a property value on a customer account. Use subresource property-records [[POST] /customers/{customer_id}/property-records](#operation/postSubCustomerProperties) as follows:\n```http request\nPOST <projectURL>/rest-api/customer-interface/v1.0/customers/89ac83ca207a820c62c79bf03a/property-records\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<token>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n```json\n{\n   \"property_record\": {\n      \"property_id\": \"contact_person\",\n      \"property_name\": \"Project contact person\",\n      \"property_value\": [ ]\n   }\n}\n```\n\n8. You will get a response with the property record id.\n```json\n{\n   \"data\": {\n      \"property_record_id\": \"contact_person:8aa2049ac2f84952014d96bb23\"\n   }\n}\n```\n\n9. Repeat POST method calls if you need to set more property-records or interest-records on a customer account.\n\n## How to authenticate customers in external application\n\nUse case covers authorization of a customer in an external application through REST API (customer interface only).\nFor more information, please look at the picture below:\n\n<img src=\"img/login_between_two_apps_with_auth_token-3.png\">\n\n## How to create a Marketing Automation Event?\n\nMarketing automation events are used to launch a scenario connected to an event. The scenario covers any available automation in CareCloud platform.\n\nMarketing Automation Events has the following structure of resources:\n\n<img src=\"https://imgur.com/0Bu8zWI.jpeg\">\n\n**Event group:** groups divide event types into administrator-defined categories. An administrator can add, edit or delete event groups from the administration environment of the CareCloud platform.\n\n**Event type:** It is a general definition of an event. As an administrator, you can define event types that describe the behavior and structure of following events.\n\n**Event properties:** It is a list of properties defined with the connected event type. It is a good way how to extend event type possibilities.\n\n**Event:** It is a resource that allows you to create an event for a specific customer. The event starts a Marketing Automation scenario. It can transfer data to the scenario. Marketing automation scenarios can use the data to make better decisions during their run.\n\n**Event property record:** It contains values of property that is connected with an event.\n\n### Create an event\n\n1. If you want to create an event through CareCloud REST API, make sure you know what type of event you wish to create. Correctly set it up, and check if it contains all necessary properties. If you need to create a new event group, you can do it in the events section of the CareCloud administration. You can also create a new event type or property there. When everything is set up in CareCloud administration, we can go to the next step.\n\n2. First, you have to decide what event type you want to use to create an event. To help you decide, you might select an event type depends on the event group. List of the groups you can list with API call of resource [[GET] /event-groups](#operation/getEventGroups):\n\n```http request\nGET <projectURL>/rest-api/enterprise-interface/v1.0/event-groups\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\nDepends on the results, you can select a list of event types that fits your event group or use other criteria from an [event-types resource documentation](#tag/Event-types):\n```http request\nGET <projectURL>/rest-api/enterprise-interface/v1.0/event-types?event_group_id=8bdf68d3838b4e009991\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n3. If you decided on an event type that fits your use case, you could check if you need to use any of the available [event properties](#tag/Event-properties):\n\n```http request\nGET <projectURL>/rest-api/enterprise-interface/v1.0/event-properties\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n4. Now is the time to create an event for a specific customer. Call the method [[POST] /events](#operation/postEvent) with parameters:\n\n```http request\nPOST <projectURL>/rest-api/enterprise-interface/v1.0/events\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n```json\n{\n   \"event\": {\n      \"event_type_id\": \"8bed991c68a470e7aaeffbf048\",\n      \"customer_id\": \"81ceb8582e2d8dbb7e71b7273b\",\n      \"external_id\": 157613,\n      \"data\": \"{\\\"test\\\":10,\\\"test2\\\":20}\",\n      \"created_at\": \"2017-06-20 16:59:49\",\n      \"secondary_external_id\": null\n   },\n   \"property_records\": [\n      {\n         \"property_id\": \"contact_person\",\n         \"property_name\": \"Project contact person\",\n         \"property_value\": [ ]\n      }\n   ]\n}\n```\n\n5. As you can see, the creation of events also contains values of properties. You set property records in events resource because we need to have all data available for the MA scenario in one API call to start immediately after.\n   If you want to see a list of events, call the method [[GET] /events](#operation/getEvents) with query params:\n\n```http request\nGET <projectURL>/rest-api/enterprise-interface/v1.0/events\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n6. If you need to see property values of the event, please call subresource of events - [[GET] /events/{event_id}/property-records](#operation/getSubEventProperties):\n\n```http request\nGET <projectURL>/rest-api/enterprise-interface/v1.0/events/85bc5819e09dab9/property-records\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<password>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n## Update of a forgotten password - customer\n\nUse case covers update of customer's password through REST API. In this case, an external application operates the whole process and updates the customer's password after a new password confirmation.\n\n<img src=\"img/forgotten_password_1.png\">\n\nUse case covers update of customer's password through REST API. It includes sending a forgotten password email to the customer.\n\n<img src=\"img/forgotten_password_rest_api-send-fp-email.png\">\n\n## Use of the resource properties\n\n1. Every resource in API has a list of parameters, that are static. As we know, every client has different requirements, and that's why we have additional properties structure in some of our resources. The additional properties contain list of a properties, that can be used by clients to set up a properties that are not used in the main parameters of a resource. The additional properties make API flexible to use.\n\n2. Resource [[GET] /rewards](#operation/getRewards) contains an additional properties parameter. Additional properties have the same strutcure throughout the API.\n\n3. API call of the resource [[GET] /rewards](#operation/getRewards) can show us all properties and the values of that resource:\n```http request\nPOST <projectURL>/rest-api/customer-interface/v1.0/rewards\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\n#<user name>:<token>\nAuthorization: Basic Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n4. You will get a response containing the list of rewards with all of their additional properties.\n\n```json\n\"data\": {\n    \"rewards\": [\n      {\n        \"reward_id\": \"8bdf68d3838b4e009991819e85\",\n        \"code\": \"\",\n        \"name\": \"Letní balíček 2017\",\n        \"note\": null,\n          ...\n      \t\"additional_properties\": [\n            {\n            \"property_record_id\": \"global:8bdf68d3838b4e009991819e85\",\n            \"property_id\": \"global\",\n            \"property_name\": \"Global setup of reward\",\n            \"property_value\": true,\n            \"last_change\": \"2017-06-14 10:43:49.882375\"\n          \t}\n       ],\n        \"priority\": null,\n        \"image_urls\": [],\n        \"last_change\": \"2017-06-14 10:43:49.882375\",\n        \"state\": 1\n      },\n       ...\n```\n\n## Assign a free card to the existing customer\nThis use case describes the process of assigning free cards to the existing customer. In this case, the customer holds the card and knows the number of the card. It covers only cards that exist in the database already, and they are ready to be used.\n\n1. Find a free card that it could be assigned to the customer by the card number. To do that, you have to filter cards.\n   Use parameters `card_number` to filter a card that the customer holds.\n\n```http request\nGET <projectURL>/webservice/rest-api/enterprise-interface/v1.0/cards?card_number=2001900627\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\nAuthorization: Bearer Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n```json\n{\n  \"data\": {\n    \"cards\": [\n      {\n        \"card_id\": \"8ecdd31720a5de8af85e1c566\",\n        \"customer_id\": null,\n        \"card_type_id\": \"86e05affc7a7abcd513ab400\",\n        \"card_number\": \"2001900627\",\n        \"state\": 1,\n        \"valid_from\": null,\n        \"valid_to\": null,\n        \"store_id\": null,\n        \"last_change\": \"2012-08-21 14:25:13.821752\"\n      }\n    ],\n    \"total_items\": 35415\n  }\n}\n```\n2. If you got a successful result, that means the card you are looking for exists in the database. The next step is to check the card's parameters to confirm it is free to use.\n   You need to check parameter `customer_id` (should have value `null`) to filter only cards without a relation to the customer.\n\n3. You need to add customer identification when you find a free card by parameters from the previous point.\n   With the following API call from resource [PUT /cards](#operation/putCard).\n   Set parameter `customer_id` like in example `e05affc7a7abefc513ab` with the customer id. Other parameters stay unchanged.\n\n```http request\nPUT <projectURL>/webservice/rest-api/enterprise-interface/v1.0/cards/8ecdd31720a5de8af85e1c566\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\nAuthorization: Bearer Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n```json\n{\n    \"card\": \n      {\n        \"card_id\": \"8ecdd31720a5de8af85e1c566\",\n        \"customer_id\": \"e05affc7a7abefc513ab\",\n        \"card_type_id\": \"86e05affc7a7abcd513ab400\",\n        \"card_number\": \"2001900627\",\n        \"state\": 1,\n        \"valid_from\": null,\n        \"valid_to\": null,\n        \"store_id\": null,\n      }\n}\n\n```\n\n4. After the successful API call, the card has been assigned to the customer, and it's ready to be used.\n   In case of any error, please follow the error message to find the solution.\n\n5. If you didn't find any card, the card you were looking for is not in the system. In this case, you should insert a new card into the system.\n   There is a way how to do it through API. Otherwise, you have to import cards manually to the system via CDP administration.\n   If you decide to use an API solution, you can create a new card. For that, you need to know a card type.\n   If you don't know card type, you can select a card type from the resource [GET /card-types](#operation/getCardTypes):\n\n```http request\nGET <projectURL>/webservice/rest-api/enterprise-interface/v1.0/card-types\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\nAuthorization: Bearer Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\nResponse:\n\n```json\n{\n  \"data\": {\n    \"card_types\": [\n      {\n        \"card_type_id\": \"8bd48117006496e01788109b8\",\n        \"name\": \"Business card\",\n        \"prefix\": \"12\"\n      },\n      {\n        \"card_type_id\": \"85d85ccae1fbb739f0a6db02b\",\n        \"name\": \"REST API card type\",\n        \"prefix\": \"\"\n      }\n    ],\n    \"total_items\": 2\n  }\n}\n```\n\n6. Now you know the card type, card number, and customer id. You can create a new card in the system.\n   For that, you will use the resource [POST /cards](#operation/postCard).\n\n```http request\n\nPOST <projectURL>/webservice/rest-api/enterprise-interface/v1.0/cards/\nContent-Type: application/json\nAccept-Language: cs, en-gb;q=0.8\nAuthorization: Bearer Y3VzdG9tZXJfaW50ZXJmYWNlOmNlMzZjMDg2YmZjN2U3YjBkMjNjNjY3YjdhOTUxZTk=\n```\n\n```json\n{\n    \"card\": \n      {\n        \"customer_id\": \"e05affc7a7abefc513ab\",\n        \"card_type_id\": \"8bd48117006496e01788109b8\",\n        \"card_number\": \"2001900627\",\n        \"state\": 1,\n        \"valid_from\": null,\n        \"valid_to\": null,\n        \"store_id\": null,\n      }\n}\n\n```\n\n7. If you have done everything right, you will get a card id in the response.\n\n```json\n\n{\n  \"data\": {\n    \"customer_id\": \"82c973544d6279113f387bc\"\n  }\n}\n```\n8. In case of any error, please follow the error message to find a solution.\n\n# CRM CareCloud API Reference\n\nCRM CareCloud API Reference describes each available resource in the API. Learn more about parameters, errors, and how to format your requests.  \nReview all available resources for CRM CareCloud API with this reference overview. Learn the basics of the API in CRM CareCloud  [Documentation](#).\n\n## Available resources overview\n\n### [Campaign products](#tag/Campaign-products)\n\nCampaign products are sets of products that are offered to Customers under special conditions, with different type of benefits. It can be used like a catalogue of discounted products on a special web site/e-shop or a set of special offers distributed to households as leaflet or direct mail. All this kind of campaign product types can be managed in CRM CareCloud directly or via CareCloud API.\n\n### [Cards](#tag/Cards)\n\nThe Customer can be identified by different unique identificators - cards related to the account. Credit Card, Loyalty Card, mobile Card, skipass, virtual Card or any other type of unique personal ID or any other identification method like barcode, QR code or any other key can be used. All the unique customer cards (identificators) related to the Customer account can be processed by this resource.\n\n### [Card types](#tag/Card-types)\n\nDifferent card types can be managed in CRM CareCloud. Credit Card, Loyalty Card, mobile Card, skipass, virtual Card or any other type of unique personal ID or any other identification method like barcode, QR code or any other key can be used. The card types can be differenciated by a prefix, name or design and managed by this resource.\n\n### [Countries](#tag/Countries)\n\nSome data, especially addresses are tied to a Country, which is listed in CRM CareCloud. You can get here the list of countries available.\n\n### [Customers](#tag/Customers)\n\nCRM CareCloud like a Customer Relationship Management system is about 360 view on a Customer and all relationships of the uinque Customer. Resource Customers is used for creation, processing and managing this basic entity, which contains personal and all additional related information about the Customer.\n\n### [Customer source](#tag/Customer-sources)\n\nCustomer account can be created and tied to different sources, like online registration form, e-shop, mobile app, POS, booking system, web microsite, campaign or any other source. This source is related to customer account and can be managed by this resource.\n\n### [Currencies](#tag/Currencies)\n\nSome data, especially Products can be tied to a Currency which is listed in CRM CareCloud. You can get here the list of currencies available.\n\n### [Languages](#tag/Languages)\n\nSome data, especially Customer accounts or Tokens are tied to a Language, which is listed in CRM CareCloud. You can get here the list of languages available.\n\n### [Points](#tag/Points)\n\nIf there is a Loyalty program managed by CRM CareCloud based on points collection, the points collection and redemption can be managed by this resource.\n\n### [Products](#tag/Products)\n\nThere is a Product database in CRM CareCloud that is available via this resource. Products are related to Product Groups, Product Brands and Stores. All this related information can be used for creation of Customer benefits tied to Products.\n\n### [Product Brands](#tag/Product-brands)\n\nThere is a possibility to create sets of Products within the same brand, called Product Brands. Products are related to Product Groups, Product Brands and Stores. All this related information can be used for creation of Customer Benefits tied to Product Brands.\n\n### [Product Groups](#tag/Product-groups)\n\nThere is a possibility to create sets of Products with similar properties, called Product Groups. Products are related to Product Groups, Product Brands and Stores. All this related information can be used for creation of Customer Benefits tied to Product Groups.\n\n### [Product Reservations](#tag/Product-reservations)\n\nCRM CareCloud allows to reserve Products or Product sets and manage the reservation process. There is the possibility to create a special group of Products that can be reserved - Reservable products. The Reservation of a Product can be created by this resource.\n\n### [Reservable Products](#tag/Reservable-products)\n\nThe set of Products that could be reserved can be limited. We call this group Reservable Products. You can get the details of Reservable Products and search within this group by this resource.\n\n### [Purchases](#tag/Purchases)\n\nThere are the purchases tied to customer accounts stored in CRM CareCloud. The purchases are saved online when closing the bill or imported by the offline web service after the purchase. There are many parameters that specifies the purchase like bill items and its prices, date and time of the purchase, store, where purchase was made or loyalty card number. All this data are used for segmentation or voucher creation.\n\n### [Recommendations](#tag/Recommendations)\n\nThere is the possibility to recommend the customers a product, a service or just an information in CRM CareCloud based on customer purchasing behavior and many other criteria. All recommendations can be viewed by this resource.\n\n### [Rewards](#tag/Rewards)\n\nDifferent types of Rewards for Customers can be created and managed in CRM CareCloud. The Reward is a pattern for creation of individual customer Vouchers that can be applicated to the Customer purchases directly. It is defined by a set of parameters like Reward validity, prioroty or number of points, that will be spent by application and many other. You can create rewards and get the information about actual rewards processed in CRM CareCloud by this resource.\n\n### [Segment](#tag/Segments)\n\nSegments are customer groups, which can be defined and created in CRM CareCloud according to many different criteria. Customers in the Segment share some specific common information or property and can be managed via this resource.\n\n### [Statuses](#tag/Statuses)\n\nStatus is a specific property of a customer account which can be achieved based on the defined criteria, like its validity, achieving principle or loyalty switch. It is often used for management of loyalty membership levels within the loyalty scheme setup and can be processed by this resource.\n\n### [Stores](#tag/Stores)\n\nYou can manage the network of stores (company branches) via this resource. Many properties as address, GPS coordinates, opening hours or contact details can be synchronized with any other system.\n\n### [Tokens](#tag/Tokens)\n\nManagement of token resources. Tokens are used for identification of the application installation on a device and for setup of basic application parameters (permissions, language, notification identification).\n\n### [Vouchers](#tag/Vouchers)\n\nVouchers are generated by the Rewards for a specific Customer account and they are applied during the purchasing process. They are defined by its value, validity and related Reward. Vouchers can be managed by this resource."
  contact:
    email: support@carecloud.cz
tags:
  - name: Agreements
    description: 'Legal standards (e.g., GDPR) restrict the processing of customer personal data and other operations (e.g., profiling) based on the customer''s consent (agreement). You can manage the content and status of Customers'' Consent to the Processing of Personal Data using the CareCloud platform. It also enables you to create customized Consents to Data Processing based on the requirements of your project. You can get the list of the available customer consents (agreements) here.'
  - name: Campaigns
    description: You can use and coordinate many communication channels to deliver effective results within a personalized omnichannel marketing campaign in the CareCloud platform.
  - name: Campaign products
    description: 'The Campaign products are sets of products that are offered to Customers under special conditions, with different type of benefits. It can be used like a catalogue of discounted products on a special web site/e-shop or a set of special offers distributed to households as leaflet or direct mail. All this kind of campaign product types can be managed in CRM CareCloud directly or via CareCloud API.'
  - name: Cards
    description: 'The Customer can be recognized by different identifiers - cards related to the account. You can use a credit Card, Loyalty Card, mobile Card, ski pass, virtual Card, or any other kind of unique personal ID or any other identification method like barcodes, QR codes, or another key. This resource can process all the unique customer cards (identifiers) related to the Customer account.'
  - name: Card types
    description: 'Different customer card types can be managed in CRM CareCloud. Credit Card, Loyalty Card, mobile Card, skipass, virtual Card or any other type of customer unique personal ID or any other customer identification method like barcode, QR code or any other key can be used. The customer card types can be differenciated by a prefix, name or design and managed by this resource.'
  - name: Countries
    description: 'Some data, especially addresses are tied to a Country, which is listed in CRM CareCloud. You can get here the list of countries available.'
  - name: Currencies
    description: 'Some data, especially Products can be tied to a Currency which is listed in CRM CareCloud. You can get here the list of currencies available.'
  - name: Customers
    description: 'CRM CareCloud is about 360 view on a Customer and all relationships of the Customer. Resource Customers is used for managing this basic entity, which contains personal and all additional related information about the Customer.'
  - name: Customers actions
    description: Action methods for resource customers.
  - name: Customer types
    description: You can get the list of the available customer types here.
  - name: Customer external applications
    description: 'An Application also referred to as an Application program, Application software or just an App is a computer software package that performs a specific function directly for an end-user or, in some cases, for another application. An application can be self-contained or a group of programs. CC platform enables you to connect to external Applications. You can get the list of the available customer external applications here.'
  - name: Customer properties
    description: 'You can store an unlimited amount of linked customer data for each customer account in the CareCloud platform. Standard data structures are available for common customer data. For project-specific data, it is possible to create user-defined data structures called Customer properties. You can customize the Customer properties based on your needs and populate them with data from various sources. You can also work with account properties across the CareCloud ecosystem via the CareCloud API.'
  - name: Customer relation types
    description: 'It is possible to create different relations between Customer accounts in the CareCloud platform. You can define the principle of the Customer account relation, set the specific properties of the relation type, and create customized Customer relations between two or more customer accounts.'
  - name: Customer sources
    description: 'Customer account can be created and tied to different sources, like online registration form, e-shop, mobile app, POS, booking system, web microsite, campaign or any other source. This source of the customer account is related to the account and can be managed by this resource.'
  - name: Customer source records
    description: This resource cointains all records of customers and customer sources.
  - name: Events
    description: |
      Events are a unique entity that you can use to record various activities on the customer's account. The structure of events allows you to define different types of events with specific properties, group them, and link to an individual customer account. You can use events to trigger, manage, and create workflow conditions in the Marketing Automation application.
      **Scheme of the MA related resources and their relations**
      <img src="https://imgur.com/0Bu8zWI.jpeg">
  - name: Event groups
    description: |
      Events are a unique entity that you can use to record various activities on the customer's account. The structure of events allows you to define different types of events with specific properties, group them, and link to an individual customer account. You can use events to trigger, manage, and create workflow conditions in the Marketing Automation application. You find the list of marketing automation event groups below.
      **Scheme of the MA related resources and their relations**
      <img src="https://imgur.com/0Bu8zWI.jpeg">
  - name: Event properties
    description: 'Events are a unique entity that you can use to record various activities on the customer''s account. The structure of events allows you to define different types of events with specific properties, group them, and link to an individual customer account. You can use events to trigger, manage, and create workflow conditions in the Marketing Automation application. You find the list of available properties for the events resource below.'
  - name: Event types
    description: |
      Events are a unique entity that you can use to record various activities on the customer's account. The structure of events allows you to define different types of events with specific properties, group them, and link to an individual customer account. You can use events to trigger, manage, and create workflow conditions in the Marketing Automation application. You find the list of marketing automation event types below.
      **Scheme of the MA related resources and their relations**
      <img src="https://imgur.com/0Bu8zWI.jpeg">
  - name: Interests
    description: 'There are different areas that customers are interested in, that they enjoy, that they like or prefer. You can use resource interests to manage all of this customer project-specific preferences, personal interests, passions, or hobbies.'
  - name: Languages
    description: 'Some data, especially Customer accounts or Tokens, are tied to a Language listed in CRM CareCloud. You can get here the list of languages available.'
  - name: Messages
    description: You can create and manage various messages to deliver effective content to customers within a personalized omnichannel marketing communication in the CareCloud platform. You get all the message details and deliver the messages to customers through this resource.
  - name: Message templates
    description: You can create and manage various messages to deliver effective content to customers within a personalized omnichannel marketing communication in the CareCloud platform. You get all the message template details through this resource.
  - name: Orders
    description: 'Orders are expressions of intentions to purchase products, i.e., requests to buy something. They may refer to products, services or even experiences. The order becomes a contract (spoken, written or electronic) between the business and the customer. The customer commits to receive the product and to pay for it. Orders can be managed here.'
  - name: Partners
    description: A Partner is an entity that owns and manages a defined group of customer data in the CareCloud platform based on consent to the processing of personal data. The users of a specific Partner have no access to the customer data of another Partner. Each user is linked to a particular Partner. You can get here the list of Partners available.
  - name: Points
    description: 'If CRM CareCloud manages a Loyalty program based on points collection to a customer account, the points transactions and records like points collection and points redemption can be controlled by this resource.'
  - name: Point reservation
    description: 'When CRM CareCloud manages a Loyalty program based on points collection to a customer account, the point reservations can be managed by this resource.'
  - name: Point types
    description: You can create different types of loyalty points in the CareCloud platform and get the details of loyalty point types in this resource.
  - name: Products
    description: 'A Product is an item offered for sale to the customers. The Product could be goods, a service, a ticket, or even an experience. You can manage all different Product types and their properties in the CareCloud platform, define product brands and classify Products into product groups. You get the list of Products and it''s properties in this resource.'
  - name: Product brands
    description: 'You can manage all different Product types and their properties, define product brands and classify Products into product groups in the CareCloud platform. You get the list of product brands and it''s properties in this resource.'
  - name: Product groups
    description: 'You can manage all different Product types and their properties, define product brands and classify Products into product groups in the CareCloud platform. You get the list of product groups in this resource.'
  - name: Product properties
    description: Product properties are list of available properties for the products resource.
  - name: Product reservations
    description: CRM CareCloud allows to reserve Products or Product sets and manages the reservation process. There is the possibility to create a particular group of Products that can be reserved - Reservable products. This resource can make the Reservation of a Product.
  - name: Product reservation sources
    description: You can get the list of the available product reservation sources here.
  - name: Purchases
    description: 'There are the purchases tied to customer accounts stored in CRM CareCloud. After the purchase, the purchases are saved online when closing the bill or imported by the offline web service. Many parameters specify the purchase, like bill items and their prices, date and time of the purchase, which store made the purchase, or loyalty card number. All these data are used for segmentation or voucher creation.'
  - name: Purchase item types
    description: You can get the list of the available purchase item types here.
  - name: Purchase types
    description: You can get the list of the available purchase types here.
  - name: Recommendations
    description: 'There is the possibility to recommend the customers a product, a service, or just information in CRM CareCloud based on customer purchasing behavior and many other criteria. This resource can return all recommendations.'
  - name: Recommendation engine
    description: 'There is the possibility to recommend the customer the most related product or service based on customer purchasing behavior. The product recommendation helps you guide customers on the products they should buy based on their previous shopping tendencies or shopping cart content. CareCloud Recommendation engine enables the personalization of content by listing the most likely items of high value to the customer based on his previous shopping behavior or current shopping cart content. The most typical use cases are recommendations at any customer touchpoint, such as POS, e-shop, e-mail, mobile app, etc.'
  - name: Reservable products
    description: The set of Products that could be reserved can be limited. We call this group Reservable Products. You can get the details of Reservable Products and search within this group by this resource.
  - name: Rewards
    description: 'Different types of Rewards for Customers can be created and managed in CRM CareCloud. The Reward and its features are a pattern for creating individual customer Vouchers that can be applied to the Customer purchases directly. It is defined by parameters like Reward validity, priority or number of points that will be spent by application, and many others. You can create rewards and get the information about actual rewards processed in CRM CareCloud by this resource.'
  - name: Reward properties
    description: Reward properties are list of the available properties for the rewards resource.
  - name: Segments
    description: 'Segments are the customer groups, that can be defined and created in CRM CareCloud according to many different criteria. Customers in the Segment share some specific common information or property and can be managed via this resource.'
  - name: Skipasses
    description: Customized resource cointains the skipass tickets
  - name: Statuses
    description: 'Status is a specific property of a customer account which can be achieved based on the defined criteria, like its validity, achieving principle or loyalty switch. It is often used for management of loyalty membership levels, employees or VIP customers within the loyalty scheme setup and can be processed by this resource.'
  - name: Stores
    description: 'A store is a building, part of a building, or a virtual place where products are sold. You can manage the network of your business units (shops, stores, company branches, warehouses, kiosks, e-shops, mobile, or any other applications) via this resource. Many properties like an address, GPS coordinates, opening hours, or contact details can be synchronized with any other system.'
  - name: Store groups
    description: List of store groups.
  - name: Store properties
    description: Store properties are list of available properties for store resource.
  - name: Tokens
    description: |
      Management of token resources. Tokens are used for identification of the application installation on a device and for setup of basic application parameters (permissions, language, notification identification). <p class="warning">⚠️ Warning: Tokens resource is available only in Customer interface.</p> <p class="warning">Note: The process of authentication and login to customer account using the HTTP methods  /tokens and  /tokens/{token_id}/actions/login is desribed in the section <a href="#section/Use-cases/Authentication-and-login-process-for-customer-interface">Use cases</a>.</p>
  - name: Users
    description: |
      A user is a person who utilizes an Application, a computer or network service. A user has a user account and is identified to the system by a username and password. The user is assigned a user role and user permissions in the Application. <br/><p class="warning">⚠️ Warning: Resource is available only in Enterprise interface.</p>
  - name: User roles
    description: |
      User role is a permission set that controls access to Applications, actions and features within the CareCloud Platform. Each User account requires a User role assignment. <br/><p class="warning">⚠️ Warning: Resource is available only in Enterprise interface.</p>
  - name: Vouchers
    description: 'Vouchers are generated by the Rewards for a specific Customer account and they are applied during the purchasing process. They are defined by its value, validity and related Reward. Vouchers can be managed by this resource.'
  - name: Wallet
    description: 'The Wallet in the CareCloud platform contains Rewards Points and Credits. It is assigned to each customer on his customer account. The content of the wallet is available in the Customer 360 View App. You get the Wallet content details included expirations, here.'
x-tagGroups:
  - name: Agreements
    tags:
      - Agreements
  - name: Campaigns
    tags:
      - Campaigns
      - Campaign products
  - name: Cards
    tags:
      - Cards
      - Card types
  - name: Countries
    tags:
      - Countries
  - name: Currencies
    tags:
      - Currencies
  - name: Customers
    tags:
      - Customers
      - Customers actions
      - Customer types
      - Customer external applications
      - Customer properties
      - Customer relation types
      - Customer sources
      - Customer source records
  - name: Events
    tags:
      - Events
      - Event groups
      - Event properties
      - Event types
  - name: Interests
    tags:
      - Interests
  - name: Languages
    tags:
      - Languages
  - name: Messages
    tags:
      - Messages
      - Message templates
  - name: Orders
    tags:
      - Orders
  - name: Partners
    tags:
      - Partners
  - name: Points
    tags:
      - Points
      - Point reservation
      - Point types
  - name: Products
    tags:
      - Products
      - Product brands
      - Product groups
      - Product properties
      - Product reservations
      - Product reservation sources
      - Reservable products
  - name: Purchases
    tags:
      - Purchases
      - Purchase item types
      - Purchase types
  - name: Recommendations
    tags:
      - Recommendations
      - Recommendation engine
  - name: Rewards
    tags:
      - Rewards
      - Reward properties
  - name: Segments
    tags:
      - Segments
  - name: Skipasses
    tags:
      - Skipasses
  - name: Statuses
    tags:
      - Statuses
  - name: Stores
    tags:
      - Stores
      - Store groups
      - Store properties
  - name: Tokens
    tags:
      - Tokens
  - name: Users
    tags:
      - Users
      - User roles
  - name: Vouchers
    tags:
      - Vouchers
  - name: Wallet
    tags:
      - Wallet
servers:
  - url: 'https://<projectURL>/enterprise-interface/v1.0'
    description: 'The **Enterprise API**. More in [Domain structure](#section/Getting-started/Domain-structure)'
  - url: 'https://<projectURL>/customer-interface/v1.0'
    description: 'The **Customer API**. More in [Domain structure](#section/Getting-started/Domain-structure)'
paths:
  /agreements:
    get:
      tags:
        - Agreements
      summary: Get all agreements
      description: Get a list of agreements accepted in CRM CareCloud
      operationId: getAgreements
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      agreements:
                        type: array
                        description: List of the agreements
                        items:
                          $ref: '#/components/schemas/AgreementList'
                      total_items:
                        type: integer
                        description: Count of all found agreements
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/agreements/{agreement_id}':
    get:
      tags:
        - Agreements
      summary: Detail of an agreement
      description: Get information about a specific agreement
      operationId: getAgreement
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/agreement_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AgreementList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: Collection of campaigns
      description: Get information about all available campaigns
      operationId: getCampaigns
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaigns:
                        type: array
                        description: List of the campaigns
                        items:
                          $ref: '#/components/schemas/Campaign'
                      total_items:
                        type: integer
                        description: Count of all found campaigns
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Campaigns
      summary: Create a campaign
      description: Add a new campaign
      operationId: postCampaign
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  $ref: '#/components/schemas/Campaign'
              required:
                - campaign
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaign_id:
                        type: string
                        description: The unique id of the campaign
                        example: 8edebb6b9d299c59804b2aa812
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/campaigns/{campaign_id}':
    get:
      tags:
        - Campaigns
      summary: Detail of a specific campaign
      description: Get a list of all customers
      operationId: getCampaign
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/campaign_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Campaign'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /campaign-products:
    get:
      tags:
        - Campaign products
      summary: Collection of campaign products
      description: Get information about all available campaign products
      operationId: getCampaignProducts
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/product_code'
        - $ref: '#/components/parameters/display_in'
        - $ref: '#/components/parameters/type_id'
        - $ref: '#/components/parameters/campaign_store_id'
        - $ref: '#/components/parameters/value_type_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/valid_from_full'
        - $ref: '#/components/parameters/valid_to_full'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaign_products:
                        type: array
                        description: List of the campaign products
                        items:
                          $ref: '#/components/schemas/CampaignProduct'
                      total_items:
                        type: integer
                        description: Count of all found campaign products
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Campaign products
      summary: Create a campaign product
      description: Add a new campaign product
      operationId: postCampaignProduct
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign_product:
                  $ref: '#/components/schemas/CampaignProduct'
              required:
                - campaign_product
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaign_product_id:
                        type: string
                        description: The unique id for the campaign product
                        example: 8bed991c68a470e7aaeff
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/campaign-products/{campaign_product_id}':
    get:
      tags:
        - Campaign products
      summary: Detail of a specific campaign product
      description: Get information about all details of a specific campaign product
      operationId: getCampaignProduct
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/campaign_product_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CampaignProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/campaign-products/{campaign_product_id}/campaign-product-store-records':
    get:
      tags:
        - Campaign products
      summary: Get a campaign product store records
      description: Get information about all campaign products store records.
      operationId: getCampaignProductStoreRecords
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/campaign_product_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaign_product_store_records:
                        type: array
                        description: List of the campaign product store records
                        items:
                          $ref: '#/components/schemas/CampaignProductStoreRecord'
                      total_items:
                        type: integer
                        description: Count of all found campaign product store records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Campaign products
      summary: Add a store to the campaign product
      description: 'Add one of the [stores](#tag/Stores) to a campaign product'
      operationId: postCampaignProductStoreRecord
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/campaign_product_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign_product_store_record:
                  $ref: '#/components/schemas/CampaignProductStoreRecord'
              required:
                - campaign_product_store_record
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      campaign_product_store_record_id:
                        type: string
                        description: The unique id for the campaing product store record.
                        example: 88c774183f5c3e413b3ba570f8
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /cards:
    get:
      tags:
        - Cards
      summary: Get all cards
      description: Get information about all customer cards
      operationId: getCards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/card_number'
        - $ref: '#/components/parameters/card_type_id'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/is_valid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      cards:
                        type: array
                        description: Collection of customer cards
                        items:
                          $ref: '#/components/schemas/Card'
                      total_items:
                        type: integer
                        description: Count of all found customer cards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Cards
      summary: Create a card
      description: Add a new customer card
      operationId: postCard
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/Card'
              required:
                - card
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      card_id:
                        type: string
                        description: The unique id for the card
                        example: 81a94c48474bc45c03d41f7016
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/cards/{card_id}':
    get:
      tags:
        - Cards
      summary: Get a card
      description: Get information about a specific customer card
      operationId: getCard
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/card_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - Cards
      summary: Update a card
      description: Update a specific customer card
      operationId: putCard
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/card_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/Card'
              required:
                - card
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /cards/actions/assign-free-card:
    post:
      tags:
        - Cards
      summary: Assign free card
      description: |
        Assign a free card in order to the customer

        <p class="warning">⚠️ Action method is available only in Enterprise interface.</p>
      operationId: postAssignCard
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_type_id:
                  type: string
                  description: The unique id for the card type.
                  example: 8bed991c68a470e7aaeffbf048
                customer_id:
                  type: string
                  description: The unique id for the card holder.
                  example: 81ceb8582e2d8dbb7e71b7273b
              required:
                - card_type_id
                - customer_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      card_id:
                        type: string
                        readOnly: true
                        description: The unique id for the card
                        example: 81a94c48474bc45c03d41f7016
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /cards/actions/generate-digital-card-file:
    post:
      tags:
        - Cards
      summary: Generate digital card file
      description: Generate file with digital card. File can be generated as a PNG file or file for Apple Wallet.
      operationId: postGenerateDigitalCard
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  description: Id of the card. It will generates file from this card
                  type: string
                  example: 81a94c48474bc45c03d41f7016
                file_type:
                  description: 'Type of the final file *Possible values: png - generates picture in png format /wallet - generates pass package file for Apple Wallet*'
                  type: string
                  enum:
                    - png
                    - wallet
                  example: png
              required:
                - card_id
                - file_type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      file_url:
                        description: Url address of the final file with digital card
                        type: string
                        example: 'https://dev-carecloud.cortex.cz//crm/scripts/generate_mobile_card.php?account=80c4d97a736d98a90badb5128&card=8bd4811700646e0b1788109b8'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /card-types:
    get:
      tags:
        - Card types
      summary: Get information about all card types
      description: Get information about all card types as a list of all customer card types
      operationId: getCardTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      card_types:
                        type: array
                        description: Collection of all card types
                        items:
                          $ref: '#/components/schemas/CardType'
                      total_items:
                        type: integer
                        description: Count of all found card types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Card types
      summary: Create a new card type
      description: Add a new customer card type
      operationId: postCardType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_type:
                  $ref: '#/components/schemas/CardType'
              required:
                - card
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      card_type_id:
                        type: string
                        description: The unique id for the card type.
                        example: 8bed991c68a470e7aaeffbf048
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/card-types/{card_type_id}':
    get:
      tags:
        - Card types
      summary: Get a card type
      description: Get information about a specific customer card type
      operationId: getCardType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/card_type_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CardType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - Card types
      summary: Update a card type
      description: Update a specific customer card type
      operationId: putCardType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/card_type_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_type:
                  $ref: '#/components/schemas/CardType'
              required:
                - card_type
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/card-types/{card_type_id}/cards':
    get:
      tags:
        - Card types
      summary: Get a collection of cards
      description: Get information about all cards by card types resource
      operationId: getSubCardTypeCards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/card_type_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/is_valid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      cards:
                        type: array
                        description: List of cards
                        items:
                          $ref: '#/components/schemas/Card'
                      total_items:
                        type: integer
                        description: Count of all found cards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /countries:
    get:
      tags:
        - Countries
      summary: Get all countries
      description: Get a list of countries accepted in CRM CareCloud
      operationId: getCountries
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      countries:
                        type: array
                        description: List of the countries
                        items:
                          type: object
                          properties:
                            country_id:
                              type: string
                              description: The unique id of the country as ISO code
                              example: cz
                            state:
                              type: integer
                              enum:
                                - 0
                                - 1
                                - 2
                              description: |
                                State of the country
                                *Possible values are: 0 - deleted / 1- active / 2 - non active*
                              example: 1
                      total_items:
                        type: integer
                        description: Count of all found countries
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /currencies:
    get:
      tags:
        - Currencies
      summary: Get all currencies
      description: Get a list of currencies accepted in CRM CareCloud
      operationId: getCurrencies
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      currencies:
                        type: array
                        description: Structure of currency
                        items:
                          $ref: '#/components/schemas/Currency'
                      total_items:
                        type: integer
                        description: Total count of found items of resource currencies
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/currencies/{currency_id}':
    get:
      tags:
        - Currencies
      summary: Detail of a currency
      description: Get information about a specific currency
      operationId: getCurrency
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/currency_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Currency'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Add a new customer account in CRM CareCloud
      operationId: postCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  $ref: '#/components/schemas/Customer'
                customer_source:
                  $ref: '#/components/schemas/CustomerSourceRecord'
                password:
                  type: string
                  format: password
                  description: 'Password of the customer. Password must satisfy the following criteria and contain: At least one number (Example: 1 2 3); At least one uppercase letter (Example: A B C); Minimum lenght of password is 8 characters; Password is not part of a common password list (Example: abc123, password, 12345)'
                  example: password_example
                autologin:
                  type: boolean
                  description: 'If true, password is required and customer is logged in. Otherwise password is optional'
                social_network_credentials:
                  $ref: '#/components/schemas/SocialNetworkCredentials'
              required:
                - customer
                - customer_source
                - autologin
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      x-codeSamples:
        - lang: PHP
          label: CareCloud SDK
          source: "use CareCloud\\ApiException;\nuse CareCloud\\Model\\Address;\nuse CareCloud\\Model\\Agreement;\nuse CareCloud\\Model\\CustomAgreements;\nuse CareCloud\\Model\\Customer;\nuse CareCloud\\Model\\CustomersCustomerIdBody;\nuse CareCloud\\Model\\PersonalInformation;\nuse CareCloud\\Model\\SocialNetworkCredentials;\nuse CareCloud\\SDK\\Config;\nuse CareCloud\\SDK\\CareCloud;\n\nrequire_once '../vendor/autoload.php';\nrequire_once 'config.php';\n\n$config = new Config($projectUri, $login, $password, $externalAppId, $authType);\n$careCloud = new CareCloud($config);\n\n// Set Header parameter Accept-Language\n$accept_language = 'cs'; //\tstring | The unique id of the language code by ISO 639-1 Default: cs, en-gb;q=0.8\n\n// Set address of new customer\n$address = new Address();\n$address->setAddress1('Old Town Square') // string | Street name of the address\n        ->setAddress2('34') // string | Street number (Land registry number)\n        ->setAddress3('12') // string | House number\n        ->setZip('11000') // string | ZIP code\n        ->setCity('Prague 1') // string | City\n        ->setCountryCode('cz'); // string | ISO code of the country Possible values de / gb / us / it / cz / etc.\n\n// Set custom agreements of new customer\n$custom_agreement1 = new CustomAgreements();\n$custom_agreement1->setAgreementId('custom_agreement_id') // string | The unique id of the agreement in CareCloud\n                  ->setAgreementValue(1); // integer | Value of the specific agreement Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n$custom_agreement2 = new CustomAgreements();\n$custom_agreement2->setAgreementId('second_custom_agreement_id') // string | The unique id of the agreement in CareCloud\n                  ->setAgreementValue(1); // integer | Value of the specific agreement Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n\n$custom_agreements = [\n    $custom_agreement1,\n    $custom_agreement2\n];\n\n// Set agreement of new customer\n$agreement = new Agreement();\n$agreement->setAgreementGtc(1) // integer | Consent to General Terms & Conditions Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setAgreementProfiling(1) // integer | Consent to profiling Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setAgreementMarketingCommunication(0) // integer | Consent to marketing communication Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setCustomAgreements($custom_agreements);\n\n// Set personal information of new customer\n$personal_information = new PersonalInformation();\n$personal_information->setGender(1) // integer | Gender of the customer Possible values: 1 - male, 2 - female\n                     ->setFirstName('John') // string | First name of the customer\n                     ->setLastName('Smith') // string | Last name of the customer\n                     ->setBirthdate('1985-02-12') // string <date> | Customer's date of birth (YYYY-MM-DD)\n                     ->setEmail('happy_customer@crmcarecloud.com') // string | Email of the customer\n                     ->setPhone('420523828931') // string | Phone number of the customer with international prefix (420000000000)\n                     ->setLanguageId('cs') // string | The unique id for the language by ISO 639 code\n                     ->setStoreId('8bed991c68a4') // string | The unique id for the original customer account store of registration\n                     ->setPhotoUrl(null) // string | URL address of the customer photo. If customer has no photo, this parameter is not send\n                     ->setAddress($address)\n                     ->setAgreement($agreement);\n\n$customer = new Customer();\n$customer->setPersonalInformation($personal_information);\n\n// Set source record of new customer from object (CustomerSourceRecord)\n$customer_source = new CustomerSourceRecord();\n$customer_source->setCustomerSourceId('8fd73167342d06899c4c015320') // string | The unique id of the customer source. It identifies the system where the customer belongs or the customer account was created\n                ->setExternalId('external-id'); // string | The unique external id of the customer. It may be id from the other system\n\n// Set customer Social network credentials\n$social_network_credentials = new SocialNetworkCredentials();\n$social_network_credentials->setSocialNetworkId('twitter') // string | The unique id of the social network\n                           ->setSocialNetworkToken('38e123j1jedu12d1jnjqwd'); // string | Social network customer's token\n\n// Set basic information about new customer\n$body = new CustomersBody();\n$body->setCustomer($customer)\n     ->setCustomerSource($customer_source)\n     ->setPassword('fO7mrC7spZjr') // string | Password of the customer.\n     ->setAutologin(false) // boolean | If true, password is required and customer is logged in. Otherwise password is optional\n     ->setSocialNetworkCredentials($social_network_credentials);\n\n// Call endpoint and get data\ntry {\n    $newCustomer = $careCloud->customersApi()->postCustomer( $body, $accept_language );;\n} catch (ApiException $e) {\n    die(var_dump($e->getResponseBody() ?: $e->getMessage()));\n}\n"
        - lang: PHP
          label: CareCloud Client
          source: |
            require_once(__DIR__ . '/vendor/autoload.php');
            // Configure HTTP basic authorization: basicAuth
            $config = CareCloud\Configuration::getDefaultConfiguration()
                          ->setUsername('YOUR_USERNAME')
                          ->setPassword('YOUR_PASSWORD');
                // Configure HTTP bearer authorization: bearerAuth
                $config = CareCloud\Configuration::getDefaultConfiguration()
                ->setAccessToken('YOUR_ACCESS_TOKEN');


            $apiInstance = new CareCloud\Api\CustomersApi(
                // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
                // This is optional, `GuzzleHttp\Client` will be used as default.
                new GuzzleHttp\Client(),
                $config
            );
            $body = new \CareCloud\Model\CustomersBody(); // \CareCloud\Model\CustomersBody |
            $accept_language = "cs, en-gb;q=0.8"; // string | The unique id of the language code by ISO 639-1

            try {
                $result = $apiInstance->postCustomer($body, $accept_language);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling CustomersApi->postCustomer: ', $e->getMessage(), PHP_EOL;
            }
    get:
      tags:
        - Customers
      summary: Get all customers
      description: Get a list of all customers
      operationId: getCustomers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/customer_source_id'
        - $ref: '#/components/parameters/first_name'
        - $ref: '#/components/parameters/last_name'
        - $ref: '#/components/parameters/birthdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customers:
                        type: array
                        description: Array of customers
                        items:
                          $ref: '#/components/schemas/Customer'
                      total_items:
                        type: integer
                        description: Count of all found customers
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      x-codeSamples:
        - lang: PHP
          label: CareCloud SDK
          source: "use CareCloud\\ApiException;\nuse CareCloud\\SDK\\Config;\nuse CareCloud\\SDK\\CareCloud;\n\nrequire_once '../vendor/autoload.php';\nrequire_once 'config.php';\n\n$config = new Config($projectUri, $login, $password, $externalAppId, $authType);\n$careCloud = new CareCloud($config);\n\n// Set Header parameter Accept-Language\n$accept_language = 'cs'; //\tstring | The unique id of the language code by ISO 639-1 Default: cs, en-gb;q=0.8\n\n// Set query parameters\n$count               = 100; // integer >= 1 | The number of records to return.\n$offset              = 0; // integer | The number of records from a collection to skip.\n$sort_field          = 'last_change'; // string | One of the query string parameters for sorting. Response is sorted by the specified field.\n$sort_direction      = 'DESC'; // string | Direction of sorting the response list.\n$email               = 'happy_customer@crmcarecloud.com'; // string | Search by email\n$phone               = '420523828931'; // string | Phone number with international prefix (420000000)\n$customer_source_id  = null; // string | The unique id of the customer source. It identifies the system where the customer belongs or the customer account was created\n$first_name          = 'John'; // string | Search by first name\n$last_name           = 'Smith'; // string | Search by last name\n$birthdate           = '1985-02-12'; // string | Customer's date of birth. Possible values are: YYYY-MM-DD / DD.MM.YYYY\n\n// Call endpoint and get data\ntry {\n    $getCustomers  = $careCloud->customersApi()->getCustomers($accept_language, $count, $offset, $sort_field, $sort_direction, $email, $phone, $customer_source_id, $first_name, $last_name, $birthdate);\n    $customers     = $getCustomers->getData()->getCustomers();\n    $totalItems    = $getCustomers->getData()->getTotalItems();\n} catch (ApiException $e) {\n    die(var_dump($e->getResponseBody() ?: $e->getMessage()));\n}\n"
        - lang: PHP
          label: CareCloud Client
          source: |
            require_once(__DIR__ . '/vendor/autoload.php');
            // Configure HTTP basic authorization: basicAuth
            $config = CareCloud\Configuration::getDefaultConfiguration()
                          ->setUsername('YOUR_USERNAME')
                          ->setPassword('YOUR_PASSWORD');
                // Configure HTTP bearer authorization: bearerAuth
                $config = CareCloud\Configuration::getDefaultConfiguration()
                ->setAccessToken('YOUR_ACCESS_TOKEN');


            $apiInstance = new CareCloud\Api\CustomersApi(
                // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
                // This is optional, `GuzzleHttp\Client` will be used as default.
                new GuzzleHttp\Client(),
                $config
            );
            $accept_language = "cs, en-gb;q=0.8"; // string | The unique id of the language code by ISO 639-1
            $count = 100; // int | The number of records to return.
            $offset = 0; // int | The number of records from a collection to skip.
            $sort_field = "sort_field_example"; // string | One of the query string parameters for sorting. *Response is sorted by the specified field.*
            $sort_direction = "sort_direction_example"; // string | Direction of sorting the response list.
            $email = "email_example"; // string | Search by email
            $phone = "phone_example"; // string | Phone number with international prefix (420000000)
            $customer_source_id = "customer_source_id_example"; // string | The unique id of the customer source. It identifies the system where the customer belongs or the customer account was created
            $first_name = "first_name_example"; // string | Search by first name
            $last_name = "last_name_example"; // string | Search by last name
            $birthdate = "birthdate_example"; // string | Customer's date of birth. *Possible values are: YYYY-MM-DD / DD.MM.YYYY*

            try {
                $result = $apiInstance->getCustomers($accept_language, $count, $offset, $sort_field, $sort_direction, $email, $phone, $customer_source_id, $first_name, $last_name, $birthdate);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling CustomersApi->getCustomers: ', $e->getMessage(), PHP_EOL;
            }
  '/customers/{customer_id}':
    get:
      tags:
        - Customers
      summary: Get information about a customer
      description: Get information about a specific customer account
      operationId: getCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      x-codeSamples:
        - lang: PHP
          label: CareCloud SDK
          source: |
            use CareCloud\ApiException;
            use CareCloud\SDK\Config;
            use CareCloud\SDK\CareCloud;

            require_once '../vendor/autoload.php';
            require_once 'config.php';

            $config = new Config($projectUri, $login, $password, $externalAppId, $authType);
            $careCloud = new CareCloud($config);

            // Set Header parameter Accept-Language
            $accept_language = 'cs'; // string | The unique id of the language code by ISO 639-1 Default: cs, en-gb;q=0.8

            // Set path parameter
            $customer_id     = '87af991126405bf8e7dfb36045'; // string | The unique id for the customer

            // Call endpoint and get data
            try {
                $getCustomer = $careCloud->customersApi()->getCustomer($customer_id, $accept_language);
                $customer    = $getCustomer->getData();
            } catch (ApiException $e) {
                die(var_dump($e->getResponseBody() ?: $e->getMessage()));
            }
        - lang: PHP
          label: CareCloud Client
          source: |
            require_once(__DIR__ . '/vendor/autoload.php');
            // Configure HTTP basic authorization: basicAuth
            $config = CareCloud\Configuration::getDefaultConfiguration()
                          ->setUsername('YOUR_USERNAME')
                          ->setPassword('YOUR_PASSWORD');
                // Configure HTTP bearer authorization: bearerAuth
                $config = CareCloud\Configuration::getDefaultConfiguration()
                ->setAccessToken('YOUR_ACCESS_TOKEN');


            $apiInstance = new CareCloud\Api\CustomersApi(
                // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
                // This is optional, `GuzzleHttp\Client` will be used as default.
                new GuzzleHttp\Client(),
                $config
            );
            $customer_id = "87af991126405bf8e7dfb36045"; // string | The unique id for the customer
            $accept_language = "cs, en-gb;q=0.8"; // string | The unique id of the language code by ISO 639-1

            try {
                $result = $apiInstance->getCustomer($customer_id, $accept_language);
                print_r($result);
            } catch (Exception $e) {
                echo 'Exception when calling CustomersApi->getCustomer: ', $e->getMessage(), PHP_EOL;
            }
    put:
      tags:
        - Customers
      summary: Update a customer
      description: Update the information on a specific customer account
      operationId: putCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  $ref: '#/components/schemas/Customer'
                password:
                  type: string
                  format: password
                  description: Password of customer.
                  example: 'fbsdfbkjebf$2,4d4fnb#,ds4@fnm,2dsf6sa'
                social_network_credentials:
                  $ref: '#/components/schemas/SocialNetworkCredentials'
              required:
                - customer
                - autologin
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      x-codeSamples:
        - lang: PHP
          label: CareCloud SDK
          source: "use CareCloud\\ApiException;\nuse CareCloud\\Model\\Address;\nuse CareCloud\\Model\\Agreement;\nuse CareCloud\\Model\\CustomAgreements;\nuse CareCloud\\Model\\Customer;\nuse CareCloud\\Model\\CustomersCustomerIdBody;\nuse CareCloud\\Model\\PersonalInformation;\nuse CareCloud\\Model\\SocialNetworkCredentials;\nuse CareCloud\\SDK\\Config;\nuse CareCloud\\SDK\\CareCloud;\n\nrequire_once '../vendor/autoload.php';\nrequire_once 'config.php';\n\n$config = new Config($projectUri, $login, $password, $externalAppId, $authType);\n$careCloud = new CareCloud($config);\n\n// Set Header parameter Accept-Language\n$accept_language = 'cs'; //\tstring | The unique id of the language code by ISO 639-1 Default: cs, en-gb;q=0.8\n\n// Set path parameter\n$customer_id     = '87af991126405bf8e7dfb36045'; // string | The unique id for the customer\n\n// Set address of customer\n$address = new Address();\n$address->setAddress1('Old Town Square') // string | Street name of the address\n        ->setAddress2('34') // string | Street number (Land registry number)\n        ->setAddress3('12') // string | House number\n        ->setZip('11000') // string | ZIP code\n        ->setCity('Prague 1') // string | City\n        ->setCountryCode('cz'); // string | ISO code of the country Possible values de / gb / us / it / cz / etc.\n\n// Set custom agreements of customer\n$custom_agreement1 = new CustomAgreements();\n$custom_agreement1->setAgreementId('custom_agreement_id') // string | The unique id of the agreement in CareCloud\n                  ->setAgreementValue(1); // integer | Value of the specific agreement Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n$custom_agreement2 = new CustomAgreements();\n$custom_agreement2->setAgreementId('second_custom_agreement_id') // string | The unique id of the agreement in CareCloud\n                  ->setAgreementValue(1); // integer | Value of the specific agreement Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n\n$custom_agreements = [\n  $custom_agreement1,\n  $custom_agreement2\n];\n\n// Set agreement of customer\n$agreement = new Agreement();\n$agreement->setAgreementGtc(1) // integer | Consent to General Terms & Conditions Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setAgreementProfiling(1) // integer | Consent to profiling Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setAgreementMarketingCommunication(0) // integer | Consent to marketing communication Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set\n          ->setCustomAgreements($custom_agreements);\n\n// Set personal information of customer\n$personal_information = new PersonalInformation();\n$personal_information->setGender(1) // integer | Gender of the customer Possible values: 1 - male, 2 - female\n                     ->setFirstName('John') // string | First name of the customer\n                     ->setLastName('Smith') // string | Last name of the customer\n                     ->setBirthdate('1985-02-12') // string <date> | Customer's date of birth (YYYY-MM-DD)\n                     ->setEmail('happy_customer@crmcarecloud.com') // string | Email of the customer\n                     ->setPhone('420523828931') // string | Phone number of the customer with international prefix (420000000000)\n                     ->setLanguageId('cs') // string | The unique id for the language by ISO 639 code\n                     ->setStoreId('8bed991c68a4') // string | The unique id for the original customer account store of registration\n                     ->setPhotoUrl(null) // string | URL address of the customer photo. If customer has no photo, this parameter is not send\n                     ->setAddress($address)\n                     ->setAgreement($agreement);\n\n$customer = new Customer();\n$customer->setPersonalInformation($personal_information);\n\n// Set customer Social network credentials\n$social_network_credentials = new SocialNetworkCredentials();\n$social_network_credentials->setSocialNetworkId('twitter') // string | The unique id of the social network\n->setSocialNetworkToken('38e123j1jedu12d1jnjqwd'); // string | Social network customer's token\n\n// Set basic information about customer\n$body = new CustomersCustomerIdBody();\n$body->setCustomer($customer)\n     ->setPassword('fO7mrC7spZjr') // string | Password of the customer.\n     ->setSocialNetworkCredentials($social_network_credentials);\n\n// Call endpoint and get data\ntry {\n  $putCustomer = $careCloud->customersApi()->putCustomer( $body, $customer_id, $accept_language );\n} catch (ApiException $e) {\n  die(var_dump($e->getResponseBody() ?: $e->getMessage()));\n}\n"
        - lang: PHP
          label: CareCloud Client
          source: |
            require_once(__DIR__ . '/vendor/autoload.php');
            // Configure HTTP basic authorization: basicAuth
            $config = CareCloud\Configuration::getDefaultConfiguration()
                          ->setUsername('YOUR_USERNAME')
                          ->setPassword('YOUR_PASSWORD');
                // Configure HTTP bearer authorization: bearerAuth
                $config = CareCloud\Configuration::getDefaultConfiguration()
                ->setAccessToken('YOUR_ACCESS_TOKEN');


            $apiInstance = new CareCloud\Api\CustomersApi(
                // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
                // This is optional, `GuzzleHttp\Client` will be used as default.
                new GuzzleHttp\Client(),
                $config
            );
            $body = new \CareCloud\Model\CustomersCustomerIdBody(); // \CareCloud\Model\CustomersCustomerIdBody |
            $customer_id = "customer_id_example"; // string | The unique id for the customer
            $accept_language = "cs, en-gb;q=0.8"; // string | The unique id of the language code by ISO 639-1

            try {
                $apiInstance->putCustomer($body, $customer_id, $accept_language);
            } catch (Exception $e) {
                echo 'Exception when calling CustomersApi->putCustomer: ', $e->getMessage(), PHP_EOL;
            }
  '/customers/{customer_id}/purchases':
    get:
      tags:
        - Customers
      summary: Get all customer purchases
      description: Get information about all customer account purchases.
      operationId: getSubCustomerPurchases
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/purchase_type_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchases:
                        type: array
                        description: List of purchases
                        items:
                          $ref: '#/components/schemas/Purchase'
                      total_items:
                        type: integer
                        description: Count of all found purchases
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/points':
    get:
      tags:
        - Customers
      summary: Get all customer point records
      description: Get information about all customer point records.
      operationId: getSubCustomerPints
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/point_type_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      points:
                        type: array
                        description: List of the point records
                        items:
                          $ref: '#/components/schemas/Point'
                      total_items:
                        type: integer
                        description: Count of all found point records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/vouchers':
    get:
      tags:
        - Customers
      summary: Get all customer vouchers
      description: Get information about all customer vouchers.
      operationId: getSubCustomerVouchers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/reward_store_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/is_applied'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      vouchers:
                        type: array
                        description: List of all recent vouchers
                        items:
                          $ref: '#/components/schemas/Voucher'
                      total_items:
                        type: integer
                        description: Count of all recent vouchers
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/rewards':
    get:
      tags:
        - Customers
      summary: Get all customer rewards
      description: |
        Get information about all customer rewards.

        <p class="warning">⚠️ There is the logical AND between query parameters `is_valid`, `valid_from` and `valid to`.</p>
      operationId: getSubCustomerRewards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/reward_store_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/valid_from'
        - $ref: '#/components/parameters/valid_to'
        - $ref: '#/components/parameters/reward_code'
        - $ref: '#/components/parameters/is_automated'
        - $ref: '#/components/parameters/reward_group'
        - $ref: '#/components/parameters/customer_type_id_arr'
        - $ref: '#/components/parameters/without_stores'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      rewards:
                        type: array
                        description: List of all recent rewards
                        items:
                          $ref: '#/components/schemas/Reward'
                      total_items:
                        type: integer
                        description: Count of all recent rewards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/cards':
    get:
      tags:
        - Customers
      summary: Get all customer cards
      description: Get information about all customer cards.
      operationId: getSubCustomerCards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/card_number'
        - $ref: '#/components/parameters/card_type_id'
        - $ref: '#/components/parameters/is_valid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      cards:
                        type: array
                        description: Collection of customer cards
                        items:
                          $ref: '#/components/schemas/Card'
                      total_items:
                        type: integer
                        description: Count of all found customer cards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/segment-records':
    get:
      tags:
        - Customers
      summary: Get a collection of segment records
      description: Get information about all segment records on a customer account
      operationId: getSubCustomerSegments
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      segment_records:
                        type: array
                        description: List of segment records
                        items:
                          $ref: '#/components/schemas/SegmentRecord'
                      total_items:
                        type: integer
                        description: Count of all found segment records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/status-records':
    get:
      tags:
        - Customers
      summary: Get a collection of status records
      description: Get information about all status records on a customer account
      operationId: getSubCustomerStatus
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/valid_now'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status_records:
                        type: array
                        description: List of status records
                        items:
                          $ref: '#/components/schemas/StatusRecord'
                      total_items:
                        type: integer
                        description: Count of all found status records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/recommendation-records':
    get:
      tags:
        - Customers
      summary: Get a collection of recommendation records
      description: Get information about all recommendation records on a customer account
      operationId: getSubCustomerRecommendation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommendation_records:
                        type: array
                        description: List of Recomendation records
                        items:
                          $ref: '#/components/schemas/Recommendation'
                      total_items:
                        type: integer
                        description: Count of all found recommendation records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/customer-source-records':
    get:
      tags:
        - Customers
      summary: Get customer source records
      description: Get information about all customer account source records.
      operationId: getSubCustomerSource
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_source_records:
                        type: array
                        description: List of the customer source records
                        items:
                          $ref: '#/components/schemas/CustomerSourceRecord'
                      total_items:
                        type: integer
                        description: Count of all found customer source records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Customers
      summary: Add a source to a customer
      description: 'Add one of the [customer sources](#tag/Customer-sources) to a customer account'
      operationId: postSubCustomerSource
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_source_record:
                  $ref: '#/components/schemas/CustomerSourceRecord'
              required:
                - customer_source_record
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_source_record_id:
                        type: string
                        description: The unique id for the property record
                        example: 88c4e13a765584e8e322390798
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/property-records':
    get:
      tags:
        - Customers
      summary: Get a collection of properties
      description: Get information about all property records on a customer account
      operationId: getSubCustomerProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      property_records:
                        type: array
                        description: List of property records
                        items:
                          $ref: '#/components/schemas/PropertyRecord'
                      total_items:
                        type: integer
                        description: Count of all found customer sources
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Customers
      summary: Add a property to a customer
      description: Add a new specific customer property record to a customer account
      operationId: postSubCustomerProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_record:
                  $ref: '#/components/schemas/PropertyRecord'
              required:
                - property_record
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      property_record_id:
                        type: string
                        description: The unique id of the property record
                        example: 'contact_person:8aa2049ac2f84952014d96bb23'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/property-records/{property_record_id}':
    put:
      tags:
        - Customers
      summary: Update a property on an account
      description: Update a specific customer property record on a customer account
      operationId: putSubCustomerProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/property_record_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_record:
                  $ref: '#/components/schemas/PropertyRecord'
              required:
                - property_record
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Customers
      summary: Delete a property on an account
      description: Delete a specific customer property record on a customer account
      operationId: deleteSubCustomerProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/property_record_id_path'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/interest-records':
    get:
      tags:
        - Customers
      summary: Get a collection of interest records
      description: Get information about all interest records on a customer account
      operationId: getSubCustomerInterests
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      interest_records:
                        type: array
                        description: List of interest records
                        items:
                          $ref: '#/components/schemas/InterestRecord'
                      total_items:
                        type: integer
                        description: Count of all found intertest records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Customers
      summary: Add an interest record to a customer
      description: Add a new specific customer interest record to a customer account
      operationId: postSubCustomerInterest
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interest_record:
                  $ref: '#/components/schemas/InterestRecord'
              required:
                - interest_record
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      interest_record_id:
                        type: string
                        description: The unique id for the interest record
                        example: 87d934c86a6303f5fb4d1214fb
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customers/{customer_id}/interest-records/{interest_record_id}':
    put:
      tags:
        - Customers
      summary: Update an interest record on an account
      description: Update a specific customer interest record on a customer account
      operationId: putSubCustomerInterest
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/interest_record_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interest_record:
                  $ref: '#/components/schemas/InterestRecord'
              required:
                - property_record
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Customers
      summary: Delete an interest record on an account
      description: Delete a specific customer interest record on a customer account
      operationId: deleteSubCustomerInterest
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_path'
        - $ref: '#/components/parameters/interest_record_id_path'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customers/actions/verify-credentials:
    post:
      tags:
        - Customers actions
      summary: Customer credentials verification
      description: |
        Verification of a Customer account credentials

        <p class="warning">⚠️ Action method for verification credentials is available only in Enterprise interface.</p>
      operationId: postCustomerVerifyCredentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login_type:
                  type: string
                  enum:
                    - card
                    - email
                  description: 'The unique id of the login type (available: card, email)'
                  example: email
                login_value:
                  type: string
                  description: Value of the login for customer interface API
                  example: happy_customer@cortex.cz
                password:
                  type: string
                  format: password
                  description: Password of the customer.
                  example: password123_is_not_a_good_idea
              required:
                - login_type
                - login_value
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customers/actions/verify-social-network-credentials:
    post:
      tags:
        - Customers actions
      summary: Social network credentials verification
      description: |
        Verification of a Customer account Social network credentials

        <p class="warning">⚠️ Action method for verification credentials is available only in Enterprise interface.</p>
      operationId: postCustomerVerifySocialNetworkCredentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                social_network_credentials:
                  $ref: '#/components/schemas/SocialNetworkCredentials'
              required:
                - social_network_credentials
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customers/actions/search-customers:
    get:
      tags:
        - Customers actions
      summary: Search customers
      description: |
        Search all customers matching for parameters

        <p class="warning">⚠️ Action method for search customers is available only in Enterprise interface.</p>
      operationId: getCustomerSearch
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/first_name'
        - $ref: '#/components/parameters/last_name'
        - $ref: '#/components/parameters/birthdate'
        - $ref: '#/components/parameters/card_number'
        - $ref: '#/components/parameters/searchMode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CustomerSearchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customers/actions/verify-auth-token:
    post:
      tags:
        - Customers actions
      summary: Verify auth token
      description: |
        Method verifies authentication token created by a specified application. There is the unique id of the customer as a response.

        <p class="warning">⚠️ Action method is available only in Enterprise interface.</p>
      operationId: postCustomersVerifyAuthToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                application_id:
                  type: string
                  description: Id of the application. Application is the source of the token
                  example: self_order_kiosk
                token:
                  type: string
                  description: Authentication token
                  example: a78e11e774f7f
                token_request_id:
                  type: string
                  description: 'The parameter specifies the request that caused the token to be created. If two customers generated an authentication token at the same time and in the same application, the token_request_id parameter represents additional verification to identify the correct token'
                  example: e11e7a7f7f610ea8e11e774
              required:
                - application_id
                - token
                - token_request_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-types:
    get:
      tags:
        - Customer types
      summary: Get all customer types
      description: Get a list of customer types accepted in CRM CareCloud
      operationId: getCustomerTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_types:
                        type: array
                        description: List of the customer types
                        items:
                          $ref: '#/components/schemas/Customer-type'
                      total_items:
                        type: integer
                        description: Count of all found customer types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customer-types/{customer_type_id}':
    get:
      tags:
        - Customer types
      summary: Detail of a customer type
      description: Get information about a specific customer type
      operationId: getCustomerType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_type_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Customer-type'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-external-applications:
    get:
      tags:
        - Customer external applications
      summary: Get all customer external applications
      description: Get a list of customer external applications accepted in CRM CareCloud
      operationId: getCustomerExternalApps
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_external_applications:
                        type: array
                        description: List of the customer external applications
                        items:
                          $ref: '#/components/schemas/ExternalApplication'
                      total_items:
                        type: integer
                        description: Count of all found customer external applications
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customer-external-applications/{customer_external_application_id}':
    get:
      tags:
        - Customer external applications
      summary: Detail of a customer external application
      description: Get information about a specific customer external application
      operationId: getCustomerExternalApp
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_external_application_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-properties:
    get:
      tags:
        - Customer properties
      summary: Get all customer properties
      description: Get information about customer properties
      operationId: getCustomerProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_properties:
                        type: array
                        description: List of all customer properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found customer properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customer-properties/{customer_property_id}':
    get:
      tags:
        - Customer properties
      summary: Get a customer property
      description: Get information about a specific customer property
      operationId: getCustomerProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_property_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-relation-types:
    get:
      tags:
        - Customer relation types
      summary: Get all customer relation types
      description: Get a list of customer relation types from CareCloud
      operationId: getCustomerRelationTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_relation_types:
                        type: array
                        description: List of the customer relation types
                        items:
                          $ref: '#/components/schemas/CustomerRelationType'
                      total_items:
                        type: integer
                        description: Count of all found customer relation types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/customer-relation-types/{customer_relation_type_id}':
    get:
      tags:
        - Customer relation types
      summary: Detail of a customer relation type
      description: Get information about a specific customer relation type
      operationId: getCustomerRelationType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_relation_type_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CustomerRelationType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-sources:
    get:
      tags:
        - Customer sources
      summary: Get customer sources
      description: Get information about all customer account sources
      operationId: getCustomerSources
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_sources:
                        type: array
                        description: List of the customer sources
                        items:
                          $ref: '#/components/schemas/CustomerSource'
                      total_items:
                        type: integer
                        description: Count of all found customer sources
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /customer-source-records:
    get:
      tags:
        - Customer source records
      summary: Get customer source records
      description: Get information about all customer source records.
      operationId: getCustomerSourceRecords
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/external_id'
        - $ref: '#/components/parameters/customer_source_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_source_records:
                        type: array
                        description: List of the customer source records
                        items:
                          $ref: '#/components/schemas/CustomerSourceRecord'
                      total_items:
                        type: integer
                        description: Count of all found customer source records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /events:
    get:
      tags:
        - Events
      summary: Get information about all events
      description: Get a list of agreements accepted in CRM CareCloud
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/event_type_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                        description: Collection of all events
                        items:
                          $ref: '#/components/schemas/Event'
                      total_items:
                        type: integer
                        description: Count of all found events
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Events
      summary: Create a new event
      description: Add a new event
      operationId: postEvent
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  $ref: '#/components/schemas/Event'
                property_records:
                  type: array
                  description: List of an event property records
                  items:
                    $ref: '#/components/schemas/PropertyRecord'
              required:
                - event
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event_id:
                        type: string
                        description: The unique id of the event
                        example: 8bed991c68a470e7aaeffbf048
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/events/{event_id}':
    get:
      tags:
        - Events
      summary: Get an event
      description: Get information about a specific event
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/events/{event_id}/property-records':
    get:
      tags:
        - Events
      summary: Get a collection of event properties records
      description: Get information about all property records on an event
      operationId: getSubEventProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      property_records:
                        type: array
                        description: List of property records
                        items:
                          $ref: '#/components/schemas/PropertyRecord'
                      total_items:
                        type: integer
                        description: Count of all found event property records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /event-groups:
    get:
      tags:
        - Event groups
      summary: Get all event groups
      description: Get a list of all event groups.
      operationId: getEventGroups
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/text_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event_groups:
                        type: array
                        description: List of all event groups
                        items:
                          $ref: '#/components/schemas/EventGroup'
                      total_items:
                        type: integer
                        description: Count of all found event groups
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/event-groups/{event_group_id}':
    get:
      tags:
        - Event groups
      summary: Get a event group
      description: Get information about a specific event group.
      operationId: getEventGroup
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_group_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /event-properties:
    get:
      tags:
        - Event properties
      summary: Get all event properties
      description: Get information about event properties.
      operationId: getEventProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event_properties:
                        type: array
                        description: List of all event properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found event properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/event-properties/{event_property_id}':
    get:
      tags:
        - Event properties
      summary: Get a event property
      description: Get information about a specific event property
      operationId: getEventProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_property_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /event-types:
    get:
      tags:
        - Event types
      summary: Get all event types
      description: Get a list of all event types.
      operationId: getEventTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event_types:
                        type: array
                        description: List of all event types
                        items:
                          $ref: '#/components/schemas/EventType'
                      total_items:
                        type: integer
                        description: Count of all found event types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/event-types/{event_type_id}':
    get:
      tags:
        - Event types
      summary: Get a event type
      description: Get information about a specific event type.
      operationId: getEventType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_type_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/event-types/{event_type_id}/event-properties':
    get:
      tags:
        - Event types
      summary: Get a collection of event type properties
      description: Get information about all properties of event type
      operationId: getSubEventTypeProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/event_type_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      event-properties:
                        type: array
                        description: List of event properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found event properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /interests:
    get:
      tags:
        - Interests
      summary: Get all interests
      description: Get information about interests as a list of all interests
      operationId: getInterests
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      interests:
                        type: array
                        description: List of all interests
                        items:
                          $ref: '#/components/schemas/Interest'
                      total_items:
                        type: integer
                        description: Count of all found interests
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/interests/{interest_id}':
    get:
      tags:
        - Interests
      summary: Get an interest
      description: Get information about a specific interest
      operationId: getInterest
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/interest_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /languages:
    get:
      tags:
        - Languages
      summary: Get all languages
      description: Get a list of all languages accepted in CRM CareCloud
      operationId: getLanguages
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      languages:
                        type: array
                        description: List of the language codes by ISO 639-1
                        items:
                          $ref: '#/components/schemas/Language'
                      total_items:
                        type: integer
                        description: Count of all found languages
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /messages:
    get:
      tags:
        - Messages
      summary: Get all messages
      description: Get information about messages as a list.
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/contact'
        - $ref: '#/components/parameters/communication_channel_id'
        - $ref: '#/components/parameters/send_time_from'
        - $ref: '#/components/parameters/send_time_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      messages:
                        type: array
                        description: List of all messages
                        items:
                          $ref: '#/components/schemas/Message'
                      total_items:
                        type: integer
                        description: Count of all found messages
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/messages/{message_id}':
    get:
      tags:
        - Messages
      summary: Get a message
      description: Get information about a specific message
      operationId: getMessage
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/message_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/messages/{message_id}/detail':
    get:
      tags:
        - Messages
      summary: Get a message detail
      description: Get a message detail with customer data.
      operationId: getSubMessageDetail
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/message_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MessageDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /messages/actions/send-message:
    post:
      tags:
        - Messages
      summary: Send message
      description: |
        Send message (email, SMS or PUSH notification) to customer

        <p class="warning">⚠️ Action methods are available only in Enterprise interface.</p>
      operationId: postMessageSend
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  $ref: '#/components/schemas/Message'
              required:
                - message
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /message-templates:
    get:
      tags:
        - Message templates
      summary: Get all message templates
      description: Get information about message templates as a list of all message templates.
      operationId: getMessageTemplates
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message_templates:
                        type: array
                        description: List of all message templates
                        items:
                          $ref: '#/components/schemas/MessageTemplate'
                      total_items:
                        type: integer
                        description: Count of all found message templates
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/message-templates/{message_template_id}':
    get:
      tags:
        - Message templates
      summary: Get a message template
      description: Get information about a specific message template
      operationId: getMessageTemplate
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/message_template_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MessageTemplate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Get information about all customer's orders
      operationId: getOrders
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/state'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        description: Collection of the customer orders
                        items:
                          $ref: '#/components/schemas/Order'
                      total_items:
                        type: integer
                        description: Count of all found customer orders
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Orders
      summary: Create an order
      description: Create a new order for customer
      operationId: postOrder
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  $ref: '#/components/schemas/Order'
              required:
                - order
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      order_id:
                        type: string
                        description: The unique id of the order
                        example: 80af8a5dcc0702daf336f4de41
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/orders/{order_id}':
    get:
      tags:
        - Orders
      summary: Get an order
      description: Get information about a specific order
      operationId: getOrder
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/order_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /partners:
    get:
      tags:
        - Partners
      summary: Get all partners
      description: Get a list of partners accepted in CRM CareCloud
      operationId: getPartners
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      partners:
                        type: array
                        description: List of a partners
                        items:
                          $ref: '#/components/schemas/Partner'
                      total_items:
                        type: integer
                        description: Count of all found partners
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/partners/{partner_id}':
    get:
      tags:
        - Partners
      summary: Get a partner
      description: Get information about a specific partner
      operationId: getPartner
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/partner_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Partner'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /points:
    get:
      tags:
        - Points
      summary: Get all point records
      description: 'Get a list of all point transactions, point collections and redemptions'
      operationId: getPoints
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/point_type_id'
        - $ref: '#/components/parameters/create_point_time_from'
        - $ref: '#/components/parameters/create_point_time_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      points:
                        type: array
                        description: List of the point records
                        items:
                          $ref: '#/components/schemas/Point'
                      total_items:
                        type: integer
                        description: Count of all found point records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/points/{point_id}':
    get:
      tags:
        - Points
      summary: Get a point record
      description: Get information about a specific point transaction
      operationId: getPoint
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/point_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Point'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/points/{point_id}/purchases':
    get:
      tags:
        - Points
      summary: Get a collection of purchases
      description: Get information about all purchases by points resource
      operationId: getSubPointPurchases
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/point_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/purchase_type_id'
        - $ref: '#/components/parameters/payment_time_from'
        - $ref: '#/components/parameters/payment_time_to'
        - $ref: '#/components/parameters/purchase_items_extension'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchases:
                        type: array
                        description: List of purchases
                        items:
                          $ref: '#/components/schemas/Purchase'
                      total_items:
                        type: integer
                        description: Count of all found purchases
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /points/actions/reduce-points:
    post:
      tags:
        - Points
      summary: Points redemption
      description: |
        New point redemption record is created

        <p class="warning">⚠️ Action methods are available only in Enterprise interface.</p>
      operationId: postPointsRedemption
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: Number of redeemed points.
                  example: '1000'
                customer_id:
                  type: string
                  description: The unique id for the customer.
                  example: 81ceb8582e28dbb7e71b7273b
                partner_id:
                  type: string
                  readOnly: false
                  description: The unique id of the partner.
                  example: 86e05affc7a7abefcd513ab400
              required:
                - amount
                - customer_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /points/actions/assign-points:
    post:
      tags:
        - Points
      summary: Assign of points
      description: |
        Creates a new point collection record with the corresponding value

        <p class="warning">⚠️ Action methods are available only in Enterprise interface.</p>
      operationId: postPointsAssign
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: The number of collected points.
                  example: '1500'
                customer_id:
                  type: string
                  description: The unique id for the customer.
                  example: 81ceb8582e28dbb7e71b7273b
                partner_id:
                  type: string
                  readOnly: false
                  description: The unique id of the partner.
                  example: 86e05affc7a7abefcd513ab400
              required:
                - amount
                - customer_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /points/actions/transfer-points:
    post:
      tags:
        - Points
      summary: Transfer points
      description: |
        Transfers points from one customer to another

        <p class="warning">⚠️ Action methods are available only in Enterprise interface.</p>
      operationId: postPointsTransfer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                original_customer_id:
                  type: string
                  description: Id of the original points holder.
                  example: 86ae806b9ae10r9c233bf2a5f5
                new_customer_id:
                  type: string
                  description: Id of the new points holder.
                  example: 83aa5f5ba88er59c8b9a4e6ba3
                amount:
                  type: number
                  format: float
                  description: The number of transfered points.
                  example: '50'
                point_type_id:
                  type: string
                  readOnly: false
                  description: Type of the transfered points.
                  example: 8acbd017407b60e201rf931e94
              required:
                - original_customer_id
                - new_customer_id
                - amount
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /point-reservations:
    get:
      tags:
        - Point reservation
      summary: Get all point reservations
      description: Get a list of all point reservations
      operationId: getPointReservations
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/pointRes_external_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      point_reservations:
                        type: array
                        description: List of the point reservations
                        items:
                          $ref: '#/components/schemas/PointReservation'
                      total_items:
                        type: integer
                        description: Count of all found point reservations
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/point-reservations/{point_reservation_id}':
    get:
      tags:
        - Point reservation
      summary: Get a point reservation
      description: Get information about a specific point reservation
      operationId: getPointReservation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/point_reservation_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PointReservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /point-reservations/actions/reserve-points:
    post:
      tags:
        - Point reservation
      summary: Create point reservation
      description: New point reservation is created.
      operationId: postPointReservationCreate
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                external_id:
                  type: string
                  readOnly: false
                  description: The external unique id of the product brand
                  example: '123459'
                customer_id:
                  type: string
                  readOnly: false
                  description: The unique id for the customer.
                  example: 81ceb8582e28dbb7e71b7273b
                amount:
                  type: number
                  format: float
                  readOnly: false
                  description: The number of reserved points
                  example: 11
                expiration_time:
                  type: string
                  readOnly: false
                  description: 'Date and time of the point reservation expiration *(YYYY-MM-DD HH:MM:SS)*'
                  example: '2019-10-31 00:00:00'
              required:
                - customer_id
                - external_id
                - amount
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /point-reservations/actions/free-points:
    post:
      tags:
        - Point reservation
      summary: Free points from reserevation
      description: Release reserved points.
      operationId: postPointReservationRelease
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                external_id:
                  type: string
                  description: The external id of the point reservation.
                  example: '123455'
              required:
                - external_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /point-types:
    get:
      tags:
        - Point types
      summary: Get all point types
      description: Get a list of all point types
      operationId: getPointsTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      point_types:
                        type: array
                        description: List of the point types
                        items:
                          $ref: '#/components/schemas/PointType'
                      total_items:
                        type: integer
                        description: Count of all found point types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/point-types/{point_type_id}':
    get:
      tags:
        - Point types
      summary: Get a point type
      description: Get information about a specific point type
      operationId: getPointType
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/point_type_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PointType'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /products:
    get:
      tags:
        - Products
      summary: Collection of available products
      description: Get information about all available products
      operationId: getProducts
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/product_code'
        - $ref: '#/components/parameters/external_id'
        - $ref: '#/components/parameters/external_type_code'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        description: List of CareCloud products
                        items:
                          $ref: '#/components/schemas/Product'
                      total_items:
                        type: integer
                        description: Count of all found products
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/products/{product_id}':
    get:
      tags:
        - Products
      summary: Detail of a product
      description: Get information about a specific product
      operationId: getProduct
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /product-brands:
    get:
      tags:
        - Product brands
      summary: Get all product brand
      description: Get a list of all product brands
      operationId: getProductBrands
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_brands:
                        type: array
                        description: List of all product brands
                        items:
                          $ref: '#/components/schemas/ProductBrand'
                      total_items:
                        type: integer
                        description: Count of all found product brands
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-brands/{product_brand_id}':
    get:
      tags:
        - Product brands
      summary: Get a product brand
      description: Get information about a specific product brand
      operationId: getProductBrand
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_brand_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductBrand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /product-groups:
    get:
      tags:
        - Product groups
      summary: Get all product groups
      description: Get a list of all product groups
      operationId: getProductGroups
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/product_group_code'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_groups:
                        type: array
                        description: List of all product groups
                        items:
                          $ref: '#/components/schemas/ProductGroup'
                      total_items:
                        type: integer
                        description: Count of all found product groups
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-groups/{product_group_id}':
    get:
      tags:
        - Product groups
      summary: Get a product group
      description: Get information about a specific product group
      operationId: getProductGroup
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_group_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /product-properties:
    get:
      tags:
        - Product properties
      summary: Get all product properties
      description: Get information about product properties
      operationId: getProductProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_properties:
                        type: array
                        description: List of all product properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found product properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-properties/{product_property_id}':
    get:
      tags:
        - Product properties
      summary: Get a product property
      description: Get information about a specific product property
      operationId: getProductProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_property_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /product-reservations:
    get:
      tags:
        - Product reservations
      summary: Get all product reservations
      description: Get a list of product reservations
      operationId: getProductReservations
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/reservation_code'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/reservation_state'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_reservations:
                        type: array
                        description: List of the product reservations
                        items:
                          $ref: '#/components/schemas/ProductReservation'
                      total_items:
                        type: integer
                        description: Count of all found product reservations
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Product reservations
      summary: Create a reservation
      description: Create a new product reservation in CRM CareCloud
      operationId: postProductReservation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_reservation:
                  $ref: '#/components/schemas/ProductReservation'
              required:
                - product_reservation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_reservation_id:
                        type: string
                        description: The unique id of the product reservation
                        example: 81d503b99cc748b3ca189383ad
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-reservations/{product_reservation_id}':
    get:
      tags:
        - Product reservations
      summary: Get a product-reservation
      description: Get information about a specific product-reservation
      operationId: getProductReservation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_reservation_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductReservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-reservations/{product_reservation_id}/actions/cancel-reservation':
    post:
      tags:
        - Product reservations
      summary: Cancel reservation
      description: Cancel an existing reservation.
      operationId: postProductReservationCancel
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_reservation_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_reservation_id:
                  type: string
                  description: The unique id of the product reservation.
                  example: 81d503b99cc748b3ca189383ad
              required:
                - product_reservation_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /product-reservation-sources:
    get:
      tags:
        - Product reservation sources
      summary: Get all product reservation sources
      description: Get a list of product reservation sources accepted in CRM CareCloud
      operationId: getProductReservationSources
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_reservation_sources:
                        type: array
                        description: List of the product reservation sources
                        items:
                          $ref: '#/components/schemas/ProductReservationSource'
                      total_items:
                        type: integer
                        description: Count of all found product reservation sources
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/product-reservation-sources/{product_reservation_source_id}':
    get:
      tags:
        - Product reservation sources
      summary: Detail of an product reservation source
      description: Get information about a specific product reservation source
      operationId: getProductReservationSource
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/product_reservation_source_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductReservationSource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /reservable-products:
    get:
      tags:
        - Reservable products
      summary: Get all reservable products
      description: Get the information as a list of reservable products
      operationId: getReservableProducts
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/product_code'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reservable_products:
                        type: array
                        description: List of reservable products
                        items:
                          $ref: '#/components/schemas/Product'
                      total_items:
                        type: integer
                        description: Count of all found reservable products
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/reservable-products/{reservable_product_id}':
    get:
      tags:
        - Reservable products
      summary: Get a reservable product
      description: Get information about a specific reservable product
      operationId: getReservableProduct
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reservable_product_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /reservable-products/actions/search-reservable-products:
    post:
      tags:
        - Reservable products
      summary: Search reservable products
      operationId: postReservableProductsSearch
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search_string:
                  type: string
                  description: String used for searching the results
                  example: Ca
              required:
                - search_string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      search_results:
                        type: array
                        description: List of the results
                        items:
                          $ref: '#/components/schemas/SearchResult'
                      total_items:
                        type: integer
                        description: Count of the results
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchases:
    get:
      tags:
        - Purchases
      summary: Get all purchases
      description: Get a list of purchases saved in CRM
      operationId: getPurchases
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/purchase_type_id'
        - $ref: '#/components/parameters/payment_time_from'
        - $ref: '#/components/parameters/payment_time_to'
        - $ref: '#/components/parameters/purchase_items_extension'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchases:
                        type: array
                        description: List of purchases
                        items:
                          $ref: '#/components/schemas/Purchase'
                      total_items:
                        type: integer
                        description: Count of all found purchases
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/purchases/{purchase_id}':
    get:
      tags:
        - Purchases
      summary: Get a purchase
      description: Get information about a specific purchase
      operationId: getPurchase
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/purchase_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/purchases/{purchase_id}/purchase-items':
    get:
      tags:
        - Purchases
      summary: Get purchase items tied to a purchase
      description: Get information about all purchase items created in relation to a specific purchase
      operationId: getSubPurchaseItems
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/purchase_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchase_items:
                        type: array
                        description: List of purchase items tied to a purchase
                        items:
                          $ref: '#/components/schemas/PurchaseItem'
                      total_items:
                        type: integer
                        description: Count of all found purchase items
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/purchases/{purchase_id}/vouchers':
    get:
      tags:
        - Purchases
      summary: Get vouchers tied to a purchase
      description: Get information about all vouchers created in relation to a specific purchase
      operationId: getSubPurchaseVouchers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/purchase_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      vouchers:
                        type: array
                        description: List of all recent vouchers
                        items:
                          $ref: '#/components/schemas/Voucher'
                      total_items:
                        type: integer
                        description: Count of all recent vouchers
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/purchases/{purchase_id}/points':
    get:
      tags:
        - Purchases
      summary: Get point records tied to a purchase
      description: Get information about all point records created in relation to a specific purchase
      operationId: getSubPurchasePoints
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/purchase_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      points:
                        type: array
                        description: List of the point records
                        items:
                          $ref: '#/components/schemas/Point'
                      total_items:
                        type: integer
                        description: Count of all found point records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/purchases/{purchase_id}/actions/payment-summary':
    get:
      tags:
        - Purchases
      summary: Return payment summary
      description: 'Action method shows credit, point and voucher summary of purchase.'
      operationId: getPurchasePaymentSummary
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/purchase_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      earned_points:
                        type: number
                        format: float
                        description: Amount of earned points of the purchase.
                        example: 376
                      used_credits:
                        type: number
                        format: float
                        description: Amount of credits used to pay of the purchase
                        example: 0
                      used_points:
                        type: number
                        format: float
                        description: Amount of points used to pay of the purchase
                        example: 0
                      used_points_total:
                        type: number
                        format: float
                        description: Amount of points used to pay and used in vouchers of the purchase
                        example: 0
                      used_vouchers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Voucher'
                        description: List of used vouchers
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchases/actions/recommended-best-rewards:
    post:
      tags:
        - Purchases
      summary: Recommended best rewards
      description: 'Method returns all available rewards for POS installation. The output contains list of all available and valid rewards. Each reward contains a parameter of maximum usage of rewards in a purchase. If amount equals zero, reward can not be applied. Rewards are allways connected to products through bill items.'
      operationId: postPurchaseRecommendedRewards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store_id:
                  type: string
                  description: Id of store
                  example: 8fd73167342d06899c15320
                cashdesk_number:
                  type: string
                  description: Number of the cashdesk in store
                  example: 1
                card_number:
                  type: string
                  description: A customer's card number
                  example: 200120000290
                customer_id:
                  type: string
                  description: Id of the customer that made the purchase. You can search customers by plenty parameter in resource customers
                  example: 6734267342d0689d06899c
                reward_list_type:
                  type: string
                  enum:
                    - F
                    - C
                    - A
                  description: |
                    Type of the rewards
                    *Possible values: F - full (all manual rewards available and valid for the specific POS)/ C -condensed (only manual rewards corresponding to items on the bill - maxCount not equals zero)/ A - all rewards list including automatic apply this is only for the DATA CUBE*
                  example: F
                bill:
                  $ref: '#/components/schemas/Bill'
              required:
                - store_id
                - cashdesk_number
                - card_number
                - reward_list_type
                - bill
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_best_rewards:
                        type: array
                        description: List of the best rewards for POS
                        items:
                          $ref: '#/components/schemas/RecommendedReward'
                      total_items:
                        type: integer
                        description: Count of all found rewards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchases/actions/accept-payment:
    post:
      tags:
        - Purchases
      summary: Accept payment
      description: 'The method processes bill closure requests. CareCloud returns information about discounts, applied vouchers, and points used for payment that change the bill''s final price.'
      operationId: postPurchaseAcceptPayment
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store_id:
                  type: string
                  description: Id of the store
                  example: 8fd73167342d06899c15320
                cashdesk_number:
                  type: string
                  description: Number of the cashdesk in the store
                  example: 1
                card_number:
                  type: string
                  description: The customer's card number
                  example: 200120000290
                customer_id:
                  type: string
                  description: Id of the customer that made the purchase. You can search customers by plenty parameter in resource customers
                  example: 6734267342d0689d06899c
                payment_type:
                  type: string
                  enum:
                    - S
                    - D
                  description: |
                    Method of the bill closure
                    *Possible values: “S”-standard / “D”- use discount now*
                  example: S
                max_points:
                  type: string
                  description: Amount of points to be redeemed
                  example: 4
                max_credit:
                  type: string
                  description: Amount of credits to be used
                  example: 7
                benefit_codes:
                  type: array
                  items:
                    type: string
                  description: The bill closure will use present codes and recommend discounts
                  example: []
                bill:
                  $ref: '#/components/schemas/Bill'
              required:
                - store_id
                - cashdesk_number
                - payment_type
                - bill
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AcceptedPayment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchases/actions/send-purchase:
    post:
      tags:
        - Purchases
      summary: Send purchase
      description: The method sends the final closed bill to CareCloud. It returns info about success/failure in the response
      operationId: postPurchaseSend
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store_id:
                  type: string
                  description: Id of the store
                  example: 8fd73167342d06899c15320
                cashdesk_number:
                  type: string
                  description: Number of the cashdesk in store
                  example: 1
                card_number:
                  type: string
                  description: The customer's card number
                  example: 200120000290
                customer_id:
                  type: string
                  description: Id of the customer that made the purchase. You can search customers by plenty parameter in resource customers
                  example: 6734267342d0689d06899c
                bill:
                  $ref: '#/components/schemas/FinalBill'
              required:
                - store_id
                - cashdesk_number
                - bill
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchase_id:
                        type: string
                        description: The unique id of the purchase
                        example: 85c763ebcec2fa488f8857bee
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchases/actions/assign-customer:
    post:
      tags:
        - Purchases
      summary: Assign customer
      description: 'The method assigns customer to the existing purchase. If customer could collect points, he is going to gain coresponding amount of points.'
      operationId: postPurchaseAssignCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store_id:
                  type: string
                  description: Id of store
                  example: 8fd73167342d06899c15320
                external_purchase_id:
                  type: string
                  description: The unique external id of the purchase
                  example: 2364
                card_number:
                  type: string
                  description: Number of the customer's card. Parameter is mandatory only if customer_id is not set.
                  example: 200120000290
                customer_id:
                  type: string
                  description: The unique id of the customer. Parameter is mandatory only if card_number is not set.
                  example: 89ac83ca207a820c62c79bf03a
              required:
                - store_id
                - external_purchase_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchase-item-types:
    get:
      tags:
        - Purchase item types
      summary: Get all purchase item types
      description: Get a list of purchase item types accepted in CRM CareCloud
      operationId: getPurchaseItemTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchase_item_types:
                        type: array
                        description: List of the purchase item types
                        items:
                          $ref: '#/components/schemas/Purchase-item-type'
                      total_items:
                        type: integer
                        description: Count of all found purchase types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /purchase-types:
    get:
      tags:
        - Purchase types
      summary: Get all purchase types
      description: Get a list of purchase types accepted in CRM CareCloud
      operationId: getPurchaseTypes
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      purchase_types:
                        type: array
                        description: List of the purchase types
                        items:
                          $ref: '#/components/schemas/Purchase-type'
                      total_items:
                        type: integer
                        description: Count of all found purchase types
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendations:
    get:
      tags:
        - Recommendations
      summary: Get all recommendations
      description: Get the information as a list of all recommendations.
      operationId: getRecommendations
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommendations:
                        type: array
                        description: List of recommendations
                        items:
                          $ref: '#/components/schemas/Recommendation'
                      total_items:
                        type: integer
                        description: Count of all found recommendations
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/recommendations/{recommendation_id}':
    get:
      tags:
        - Recommendations
      summary: Get a recommendation
      description: Get information about a specific recommendation
      operationId: getRecommendation
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/recommendation_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Recommendation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/product/actions/eliminate:
    get:
      tags:
        - Recommendation engine
      summary: Get the best recommendation with an elimination
      description: It selects the best products from an initial list for the customer. Eliminates all products that don't match future customer preferences (depends on his previous shopping behavior). The method doesn't have to return any results depending on the initial list (no product match future customer preferences).
      operationId: getRecommendationProductEliminate
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/product_id_list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 84b6d6ba0f1b0fadc6e73a2608
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 3
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/product/actions/order:
    get:
      tags:
        - Recommendation engine
      summary: Order products for the best recommendation.
      description: 'The method returns the algorithm ordered products from the initial list (best first). Results depend on the customer and his previous shopping behavior. If needed, the initial parameter might define the number of results.'
      operationId: getRecommendationProductOrder
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/product_id_list'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 84b6d6ba0f1b0fadc6e73a2608
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 3
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/product/actions/combined:
    get:
      tags:
        - Recommendation engine
      summary: Get the best recommendation
      description: 'It selects the best products from an initial list for the customer. Eliminates all products that don''t match future customer preferences (depends on his previous shopping behavior). If needed, it fills the missing number of results from the best products depends on the prediction algorithms.'
      operationId: getRecommendationProductCombined
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/product_id_list'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 84b6d6ba0f1b0fadc6e73a2608
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 3
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/shopping-cart/actions/eliminate:
    get:
      tags:
        - Recommendation engine
      summary: Get the best recommendation with elimination for shopping cart
      description: It selects the best products from an initial list for the customer shopping cart. Eliminates all products that don't match future customer preferences (depends on other customers' shopping behavior with the same products). The method doesn't have to return any results depending on the initial list (no product match future customer preferences).
      operationId: getRecommendationCartEliminate
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/cart_product_ids'
        - $ref: '#/components/parameters/product_id_list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/shopping-cart/actions/order:
    get:
      tags:
        - Recommendation engine
      summary: Order products for the best recommendation for a shopping cart
      description: 'The method returns the algorithm ordered products from the initial list (best first). Results depend on the customer''s shopping cart and his previous shopping behavior. If needed, the initial parameter might define the number of results.'
      operationId: getRecommendationCartOrder
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/cart_product_ids_required'
        - $ref: '#/components/parameters/product_id_list'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /recommendation-engine/shopping-cart/actions/combined:
    get:
      tags:
        - Recommendation engine
      summary: Get the best recommendation for shopping cart
      description: 'It selects the best products from an initial list for the customer shopping cart. Eliminates all products that don''t match future customer preferences (depends on other customers'' shopping behavior with the same products). If needed, it fills the missing number of results from the best products depends on the prediction algorithms.'
      operationId: getRecommendationCartCombined
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/cart_product_ids'
        - $ref: '#/components/parameters/product_id_list'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      recommended_products_list:
                        type: array
                        description: List of the recommended product ids.
                        items:
                          type: string
                        example:
                          - 80af10a712ce31a8ed0e2f68a0
                          - 8bb7f47a2743d4a7494dfee1c0
                      total_items:
                        type: integer
                        description: Count of all found product ids.
                        example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /rewards:
    get:
      tags:
        - Rewards
      summary: Get all rewards
      description: |
        Get information about rewards as a list of all rewards

        <p class="warning">⚠️ There is the logical AND between query parameters `is_valid`, `valid_from` and `valid to`.</p>
      operationId: getRewards
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/reward_store_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/valid_from'
        - $ref: '#/components/parameters/valid_to'
        - $ref: '#/components/parameters/reward_code'
        - $ref: '#/components/parameters/is_automated'
        - $ref: '#/components/parameters/reward_group'
        - $ref: '#/components/parameters/customer_type_id_arr'
        - $ref: '#/components/parameters/without_stores'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      rewards:
                        type: array
                        description: List of all rewards
                        items:
                          $ref: '#/components/schemas/Reward'
                      total_items:
                        type: integer
                        description: Count of all found rewards
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}':
    get:
      tags:
        - Rewards
      summary: Get a reward
      description: Get information about a specific reward
      operationId: getReward
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Reward'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/vouchers':
    get:
      tags:
        - Rewards
      summary: Get vouchers tied to a reward
      description: Get information about all vouchers created in relation to a specific reward
      operationId: getSubRewardVouchers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/reward_store_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      vouchers:
                        type: array
                        description: List of vouchers tied to a reward
                        items:
                          $ref: '#/components/schemas/Voucher'
                      total_items:
                        type: integer
                        description: Count of all found vouchers
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/products':
    get:
      tags:
        - Rewards
      summary: Get products tied to a reward
      description: Get information about all products created in relation to a specific reward
      operationId: getSubRewardProducts
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        description: List of products tied to a reward
                        items:
                          $ref: '#/components/schemas/Product'
                      total_items:
                        type: integer
                        description: Count of all found products
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/product-groups':
    get:
      tags:
        - Rewards
      summary: Get product groups tied to a reward
      description: Get information about all product groups created in relation to a specific reward
      operationId: getSubRewardProductGroups
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_groups:
                        type: array
                        description: List of product groups tied to a reward
                        items:
                          $ref: '#/components/schemas/ProductGroup'
                      total_items:
                        type: integer
                        description: Count of all found product groups
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/product-brands':
    get:
      tags:
        - Rewards
      summary: Get product brands tied to a reward
      description: Get information about all product brands created in relation to a specific reward
      operationId: getSubRewardProductBrands
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      product_brands:
                        type: array
                        description: List of product brands tied to a reward
                        items:
                          $ref: '#/components/schemas/ProductBrand'
                      total_items:
                        type: integer
                        description: Count of all found product brands
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/stores':
    get:
      tags:
        - Rewards
      summary: Get all stores
      description: Get information as a list of all stores of specific reward. Customer can apply this reward in every of these stores
      operationId: getSubRewardStores
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/visible_for_customer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stores:
                        type: array
                        description: List of the all stores where customer can apply reward
                        items:
                          $ref: '#/components/schemas/Store'
                      total_items:
                        type: integer
                        description: Count of all found stores
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/rewards/{reward_id}/actions/create-voucher':
    post:
      tags:
        - Rewards
      summary: Create a new voucher
      description: Create a new voucher for a specific customer based on a reward features definition
      operationId: postRewardCreateVoucher
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: The unique id of the customer.
                  example: 81ceb8582e2d8dbb7e71b7273b
                code:
                  type: string
                  description: Code of the voucher
                  example: w7TU7KfeE
              required:
                - customer_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      voucher_id:
                        type: string
                        description: The unique id of the voucher
                        example: 8bb7345976bbc9ed20e5083dd6
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /reward-properties:
    get:
      tags:
        - Reward properties
      summary: Get all reward properties
      description: Get information about reward properties
      operationId: getRewardProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reward_properties:
                        type: array
                        description: List of all reward properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found reward properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/reward-properties/{reward_property_id}':
    get:
      tags:
        - Reward properties
      summary: Get a reward property
      description: Get information about a specific reward property
      operationId: getRewardProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/reward_property_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /segments:
    get:
      tags:
        - Segments
      summary: Get all segments
      description: Get information about segments as a list of all segments
      operationId: getSegments
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      segments:
                        type: array
                        description: List of all segments
                        items:
                          $ref: '#/components/schemas/Segment'
                      total_items:
                        type: integer
                        description: Count of all found segments
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/segments/{segment_id}':
    get:
      tags:
        - Segments
      summary: Get a segment
      description: Get information about a specific segment
      operationId: getSegment
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/segment_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Segment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/segments/{segment_id}/segment-records':
    get:
      tags:
        - Segments
      summary: Get a collection of segment records
      description: Get information about all segment records on segments resource.
      operationId: getSubSegmentRecords
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/segment_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      segment_records:
                        type: array
                        description: List of segment records
                        items:
                          $ref: '#/components/schemas/SegmentRecord'
                      total_items:
                        type: integer
                        description: Count of all found segment records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/segments/{segment_id}/actions/add-customer':
    post:
      tags:
        - Segments
      summary: Add customer to a segment
      description: Action method that adds customer to specified segment.
      operationId: postSegmentAddCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/segment_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: The unique id for the customer
                  example: 89ac83ca207a820c62c79bf03a
              required:
                - customer_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/segments/{segment_id}/actions/remove-customer':
    post:
      tags:
        - Segments
      summary: Remove customer from a segment
      description: Action method that removes customer from a specified segment.
      operationId: postSegmentRemoveCustomer
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/segment_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: The unique id for the customer
                  example: 89ac83ca207a820c62c79bf03a
              required:
                - customer_id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /skipasses:
    get:
      tags:
        - Skipasses
      summary: Get all skipasses
      description: Get a list of skipasses in CRM CareCloud
      operationId: getSkipasses
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/pos_id'
        - $ref: '#/components/parameters/external_order_id'
        - $ref: '#/components/parameters/skipass_name'
        - $ref: '#/components/parameters/resort_name'
        - $ref: '#/components/parameters/customer_category_name'
        - $ref: '#/components/parameters/skipass_card_id'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/skipass_type_id'
        - $ref: '#/components/parameters/skipass_state'
        - $ref: '#/components/parameters/external_skipass_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/is_cancelled'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      skipasses:
                        type: array
                        description: List of available skipasses
                        items:
                          $ref: '#/components/schemas/Skipass'
                      total_items:
                        type: integer
                        description: Count of all found skipasses
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/skipasses/{skipass_id}':
    get:
      tags:
        - Skipasses
      summary: Get a skipass
      description: Get information about a specific skipass resource.
      operationId: getSkipass
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/skipass_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Skipass'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - Skipasses
      summary: Update a skipass
      description: This method updates a specific skipass resource.
      operationId: putSkipass
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/skipass_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skipass:
                  $ref: '#/components/schemas/Skipass'
              required:
                - skipass
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /skipasses/actions/overview:
    get:
      tags:
        - Skipasses
      summary: Get skipasses overview
      description: Get information about skipasses in time interval
      operationId: getSkipassesOverview
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/valid_from'
        - $ref: '#/components/parameters/valid_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      active_skipasses:
                        type: integer
                        description: Amount of active skipasses in date range. Active skipasses can be used by customers in their validity range
                        example: 113655
                      canceled_skipasses:
                        type: integer
                        description: Amount of canceled skipasses in date range. Canceled skipasses in production systems and in CareCloud. Customers cannot use them anymore
                        example: 446
                      deactivated_skipasses:
                        type: integer
                        description: Amount of deactivated skipasses in date range. Skipasses deactivated in CareCloud only. These skipasses are usually not sent to production systems. Deactivation have been done in system CareCloud
                        example: 233834
                      sold_skipasses:
                        type: integer
                        description: Amount of sold skipasses in date range. Skipasses deactivated in CareCloud only. These skipasses are usually not sent to production systems. Deactivation have been done in system CareCloud
                        example: 347489
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /statuses:
    get:
      tags:
        - Statuses
      summary: Get all statuses
      description: Get information as a collection of all recent statuses
      operationId: getStatuses
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      statuses:
                        type: array
                        description: List of recent statuses
                        items:
                          $ref: '#/components/schemas/Status'
                      total_items:
                        type: integer
                        description: Count of all found statuses
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/statuses/{status_id}':
    get:
      tags:
        - Statuses
      summary: Get a status
      description: Get information about a specific status
      operationId: getStatus
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/status_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /stores:
    get:
      tags:
        - Stores
      summary: Get all stores
      description: Get information as a list of all stores.
      operationId: getStores
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/visible_for_customer'
        - $ref: '#/components/parameters/property_id'
        - $ref: '#/components/parameters/property_value'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stores:
                        type: array
                        description: List of all stores
                        items:
                          $ref: '#/components/schemas/Store'
                      total_items:
                        type: integer
                        description: Count of all found stores
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Stores
      summary: Create a store
      description: Add a new store
      operationId: postStore
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store:
                  $ref: '#/components/schemas/Store'
              required:
                - store
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      store_id:
                        type: string
                        description: The unique id of the store in CareCloud
                        example: 86e05affc7a7abefcd513ab400
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/stores/{store_id}':
    get:
      tags:
        - Stores
      summary: Get a store
      description: Get information about a specific store resource.
      operationId: getStore
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      tags:
        - Stores
      summary: Update a store
      description: This method updates a specific store resource.
      operationId: putStore
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store:
                  $ref: '#/components/schemas/Store'
              required:
                - store
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/stores/{store_id}/property-records':
    get:
      tags:
        - Stores
      summary: Get a collection of properties
      description: Get information about all property records on a store account
      operationId: getSubStoreProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      property_records:
                        type: array
                        description: List of property records
                        items:
                          $ref: '#/components/schemas/PropertyRecord'
                      total_items:
                        type: integer
                        description: Count of all found store property records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - Stores
      summary: Add a property to a store
      description: Add a new specific store property record to a store
      operationId: postSubStoreProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_record:
                  $ref: '#/components/schemas/PropertyRecord'
              required:
                - property_record
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      property_record_id:
                        type: string
                        description: The unique id of the property record
                        example: 'contact_person:8aa2049ac2f84952014d96bb23'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/stores/{store_id}/store-group-records':
    get:
      tags:
        - Stores
      summary: Get a collection of store group records
      description: Get information about all store group records on a store account
      operationId: getSubStoreGroups
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      store_group_records:
                        type: array
                        description: List of store group records
                        items:
                          $ref: '#/components/schemas/StoreGroupRecord'
                      total_items:
                        type: integer
                        description: Count of all found store group records
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/stores/{store_id}/property-records/{property_record_id}':
    put:
      tags:
        - Stores
      summary: Update a property record of the store
      description: Update a specific store property record of the store
      operationId: putSubStoreProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
        - $ref: '#/components/parameters/property_record_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_record:
                  $ref: '#/components/schemas/PropertyRecord'
              required:
                - property_record
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - Stores
      summary: Delete a property record of the store
      description: Delete a specific store property record of a store
      operationId: deleteSubStoreProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_id_path'
        - $ref: '#/components/parameters/property_record_id_path'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /store-groups:
    get:
      tags:
        - Store groups
      summary: Get all store groups
      description: Get a list of all store groups
      operationId: getStoreGroups
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      store_groups:
                        type: array
                        description: List of all store groups
                        items:
                          $ref: '#/components/schemas/StoreGroup'
                      total_items:
                        type: integer
                        description: Count of all found store groups
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/store-groups/{store_group_id}':
    get:
      tags:
        - Store groups
      summary: Get a store group
      description: Get information about a specific store group
      operationId: getStoreGroup
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_group_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StoreGroup'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /store-properties:
    get:
      tags:
        - Store properties
      summary: Get all store properties
      description: Get information about store properties
      operationId: getStoreProperties
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      store_properties:
                        type: array
                        description: List of all store properties
                        items:
                          $ref: '#/components/schemas/Property'
                      total_items:
                        type: integer
                        description: Count of all found store properties
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/store-properties/{store_property_id}':
    get:
      tags:
        - Store properties
      summary: Get a store property
      description: Get information about a specific store property
      operationId: getStoreProperty
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/store_property_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /tokens:
    post:
      tags:
        - Tokens
      summary: Create a token
      description: |
        Create a token and setup of the client's application <p class="warning">Note: When creating a new token, HTTP header doesn't contain token_id in authentication part.</p> <p class="warning">⚠️ Warning: We highly recommend filling all identifications in tokens resource (device and application) to avoid problems if multiple applications use CareCloud REST API on one device.</p> <p class="warning">The creation of a token is different from other API calls. HTTP Authorization header contains only a login name and no token. See [Use cases](#section/Use-cases/Authentication-and-login-process-for-customer-interface).</p>
      operationId: postToken
      security:
        - basicAuth: []
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device:
                  $ref: '#/components/schemas/Device'
                setup:
                  $ref: '#/components/schemas/Setup'
                external_application_id:
                  type: string
                  description: 'Id of the [customer-external-application resource](#tag/Customer-external-applications)'
                  example: 86e05affc7a7abefcd513ab400
                push_token:
                  type: string
                  description: Push notification token (Apple or Google)
                  example: 4f7f658bfa7a5959e093590
              required:
                - device
                - setup
                - external_application_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token_id:
                        type: string
                        description: Client's application token
                        example: c5a67da2c3a874f7f658bfa7a5959e09359095c5da43c7a78e11e710eabce49418715a6a
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}':
    put:
      tags:
        - Tokens
      summary: Edit a push token
      description: Update a push token and installation setup
      operationId: putToken
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                setup:
                  $ref: '#/components/schemas/Setup'
                push_token:
                  type: string
                  description: Push notification token (Apple or Google)
                  example: 4f7f658bfa7a5959e093590
              required:
                - setup
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}/actions/login':
    post:
      tags:
        - Tokens
      summary: Login to the application
      description: Login of a customer account to client's application
      operationId: postTokenLogin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login_type:
                  type: string
                  enum:
                    - card
                    - email
                  description: The unique id for the login type.
                  example: email
                login_value:
                  type: string
                  description: Value of the login to Customer interface API
                  example: example@crmcarecloud.com
                password:
                  type: string
                  format: password
                  description: Password of the customer
                  example: password_example
              required:
                - device
                - setup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}/actions/logout':
    post:
      tags:
        - Tokens
      summary: Logout from the application
      description: Logout of a customer account to client's application
      operationId: postTokenLogout
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}/actions/social-network-login':
    post:
      tags:
        - Tokens
      summary: Login via social network
      description: Login of a customer account to client's application via social network
      operationId: postTokenSocialLogin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                social_network_credentials:
                  $ref: '#/components/schemas/SocialNetworkCredentials'
              required:
                - social_network_credentials
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        description: The unique id of the customer
                        example: 8ea6abece4cd0a4ded0a29f093
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}/actions/send-password-setup-email':
    post:
      tags:
        - Tokens
      summary: Send email for set up of the new customer password
      description: 'Send email, that contains link to set up a password'
      operationId: postTokenSendPasswordSetup
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Message with a setup password link will be delivered to this email address
                  example: happy_customer@carecloud.com
              required:
                - email
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/tokens/{token_id}/actions/auth-token':
    get:
      tags:
        - Tokens
      summary: Get authentication token
      description: Returns authentication token for specific external application
      operationId: getTokenAuthentication
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/token_id_path'
        - $ref: '#/components/parameters/external_application_id'
        - $ref: '#/components/parameters/token_type'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: Authentication token for external application
                        example: LQ55EH
                      token_request_id:
                        type: string
                        description: 'The parameter specifies the request that caused the token to be created. If two customers generated an authentication token at the same time and in the same application, the token_request_id parameter represents additional verification to identify the correct token'
                        example: 76951b4a90626f3635990330ec487e32c539c74
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Get a list of all users in CareCloud
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/login'
        - $ref: '#/components/parameters/first_name'
        - $ref: '#/components/parameters/last_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        description: Array of users
                        items:
                          $ref: '#/components/schemas/User'
                      total_items:
                        type: integer
                        description: Count of all found users
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/users/{user_id}':
    get:
      tags:
        - Users
      summary: Get information about an user
      description: Get information about a specific user
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/user_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /users/actions/verify-auth-token:
    post:
      tags:
        - Users
      summary: Verify user auth token
      description: Verification of the user auth token
      operationId: postUserVerifyAuthToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auth_token:
                  type: string
                  description: Authentication token for user verification
                  example: 95d22b814d9495b4e723e7a17ee104319
              required:
                - auth_token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        description: The unique id of the user
                        example: 838b73aacb5ac326cec4030c80
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /users/actions/login:
    post:
      tags:
        - Users
      summary: User login
      description: User login to external application
      operationId: postUserLogin
      security: []
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_external_application_id:
                  type: string
                  description: 'Id of an external application where user wants to be logged in from resource [user-external-application](#tag/Customer-external-applications)'
                  example: 89d1a6111b3fb6e74665d948
                login:
                  type: string
                  description: Login name of user in CareCloud
                  example: example@crmcarecloud.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: password_example
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      bearer_token:
                        type: string
                        description: 'Autentication bearer token for an user. Token can be used for autentication in REST API with Bearer Autentication (more information about it [here](#section/Authorization/bearerAuth))'
                        example: 09359095c5da43c7ae11e710eabce49418715a6a
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /users/actions/sso-login:
    post:
      tags:
        - Users
      summary: User SSO login
      description: User Signe sign-on login to external application. In this case it is necessary cary SSO token from CareCloud to login user.
      operationId: postUserSsoLogin
      security: []
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_external_application_id:
                  type: string
                  description: 'Id of an external application where user wants to be logged in. If you don''t have id, please contact your account manager.'
                  example: 89d1a6111b3fb6e74665d948
                sso_token:
                  type: string
                  description: Single sign-on token from CareCloud
                  example: ae11e710ea4d9495da43c7ae11e71b4e723e7bce494a
              required:
                - social_network_credentials
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      bearer_token:
                        type: string
                        description: 'Autentication bearer token for an user. Token can be used for autentication in REST API with Bearer Autentication (more information about it [here](#section/Authorization/bearerAuth))'
                        example: 09359095c5da43c7ae11e710eabce49418715a6a
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /users/actions/logout:
    post:
      tags:
        - Users
      summary: User logout
      description: User logout from external application
      operationId: postUserLogout
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_external_application_id:
                  type: string
                  description: 'Id of an external application where user wants to be logged in from resource [user-external-application](#tag/Customer-external-applications)'
                  example: 89d1a6111b3fb6e74665d948
                bearer_token:
                  type: string
                  description: Autentication bearer token for an user.
                  example: 09359095c5da43c7ae11e710eabce49418715a6a
              required:
                - user_external_application_id
                - bearer_token
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /user-roles:
    get:
      tags:
        - User roles
      summary: Get all user roles
      description: Get a list of all user roles in CareCloud
      operationId: getUserRoles
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user_roles:
                        type: array
                        description: Array of user roles
                        items:
                          $ref: '#/components/schemas/UserRole'
                      total_items:
                        type: integer
                        description: Count of all found user roles
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/user-roles/{user_role_id}':
    get:
      tags:
        - User roles
      summary: Get information about an user role
      description: Get information about a specific user role
      operationId: getUserRole
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/user_role_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserRole'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /vouchers:
    get:
      tags:
        - Vouchers
      summary: Get all vouchers
      description: Get information as a list o all vouchers
      operationId: getVouchers
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_field'
        - $ref: '#/components/parameters/sort_direction'
        - $ref: '#/components/parameters/customer_id'
        - $ref: '#/components/parameters/voucher_code'
        - $ref: '#/components/parameters/reward_store_id'
        - $ref: '#/components/parameters/is_valid'
        - $ref: '#/components/parameters/is_applied'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      vouchers:
                        type: array
                        description: List of all recent vouchers
                        items:
                          $ref: '#/components/schemas/Voucher'
                      total_items:
                        type: integer
                        description: Count of all recent vouchers
                        example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vouchers/{voucher_id}':
    get:
      tags:
        - Vouchers
      summary: Get a voucher
      description: Get information about a specific voucher
      operationId: getVoucher
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/voucher_id_path'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Voucher'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  '/vouchers/{voucher_id}/actions/apply-voucher':
    post:
      tags:
        - Vouchers
      summary: Application of a voucher
      description: Sets a voucher as applied
      operationId: postVoucherApply
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/voucher_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                store_id:
                  type: string
                  description: The unique id of the store where voucher was applied
                  example: 86e05affc7a7abefcd513ab400
                date_applied:
                  type: string
                  description: 'Date (ISO 8601) of voucher application *(YYYY-MM-DD HH:MM:SS)*'
                  example: '2020-12-10 10:00:00'
              required:
                - date_applied
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /wallet/actions/sales-turnover:
    get:
      tags:
        - Wallet
      summary: Get sales turnover
      description: Get information about sales turnover of the customer in time interval
      operationId: getWalletSalesTurnover
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/date_from'
        - $ref: '#/components/parameters/date_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      turnover:
                        type: array
                        description: List of all turnover by currency in time interval
                        items:
                          $ref: '#/components/schemas/QualificationTurnover'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /wallet/actions/points-overview:
    get:
      tags:
        - Wallet
      summary: Get points overview
      description: Get information about points overview of the customer in time interval
      operationId: getWalletPoints
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/date_from'
        - $ref: '#/components/parameters/date_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      earned_points:
                        type: number
                        format: float
                        description: Amount of earned points in time interval
                        example: 100
                      redeemed_points:
                        type: number
                        format: float
                        description: Amount of redeemed points in time interval
                        example: 20.5
                      available_points:
                        type: number
                        format: float
                        description: Amount of available points in the moment. Time interval has no influence to the result
                        example: 79.5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /wallet/actions/credits-overview:
    get:
      tags:
        - Wallet
      summary: Get credits overview
      description: Get information about credits overview of the customer in the time interval
      operationId: getWalletCredits
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
        - $ref: '#/components/parameters/date_from'
        - $ref: '#/components/parameters/date_to'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      earned_credits:
                        type: number
                        format: float
                        description: Amount of earned credits in time interval
                        example: 100
                      redeemed_credits:
                        type: number
                        format: float
                        description: Amount of redeemed credits in time interval
                        example: 20.5
                      available_credits:
                        type: number
                        format: float
                        description: Amount of available credits in the moment. Time interval has no influence to the result
                        example: 79.5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /wallet/actions/points-expiration-overview:
    get:
      tags:
        - Wallet
      summary: Get points expiration overview
      description: Get information about points expiration overview of the customer
      operationId: getWalletPointsExpiration
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      next_amount:
                        type: number
                        format: float
                        description: Date (ISO 8601) when first points will expire
                        example: 77.36
                      next_date:
                        type: string
                        description: Amount of redeemed points in time interval *(YYYY-MM-DD)*
                        example: '2022-01-01'
                      current_month_amount:
                        type: number
                        format: float
                        description: Amount of points that will expire in current month
                        example: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /wallet/actions/credits-expiration-overview:
    get:
      tags:
        - Wallet
      summary: Get credits expiration overview
      description: Get information about credits expiration overview of the customer
      operationId: getWalletCreditsExpiration
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - $ref: '#/components/parameters/customer_id_required'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      next_amount:
                        type: number
                        format: float
                        description: Date (ISO 8601) when first points will expire
                        example: 77.36
                      next_date:
                        type: string
                        description: Amount of redeemed points in time interval *(YYYY-MM-DD)*
                        example: '2022-01-01'
                      current_month_amount:
                        type: number
                        format: float
                        description: Amount of points that will expire in current month
                        example: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
security:
  - bearerAuth: []
  - basicAuth: []
components:
  responses:
    BadRequest:
      description: Bad input parameter. Error message specifies the detail
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/BasicError'
                  - type: object
                    properties:
                      error_data:
                        type: object
                        description: Data in case of an exception
                        properties:
                          invalid_params:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: event_id_event_type_id_customer_id_external_id_secondary_external_id
                                reason:
                                  type: string
                                  example: relation_already_exists
                                value:
                                  type: string
                                  example: ''
                                message:
                                  type: string
                                  example: 'Relation for this combination of event type, customer id and external ids already exists'
    Unauthorized:
      description: The client has invalid credentials or auth token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/BasicError'
                  - type: object
                    properties:
                      error_data:
                        type: object
                        description: Data in case of an exception
                        example: null
    Forbidden:
      description: The client does not exist or the client tried to access non authorized property/resource
    NotFound:
      description: The resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/BasicError'
                  - type: object
                    properties:
                      error_data:
                        type: object
                        description: Data in case of an exception
                        properties:
                          resource_name:
                            type: string
                            example: events
                          resource_id:
                            type: string
                            example: 84b5e55448fbd6c0b22b4d
    NotAllowed:
      description: The resource does not support the specified HTTP method
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/BasicError'
                  - type: object
                    properties:
                      error_data:
                        type: object
                        description: Data in case of an exception
                        properties:
                          http_method:
                            type: string
                            example: DELETE
    TooManyRequests:
      description: Too many requests - more than the resource limit
    InternalServerError:
      description: Server is not working as expected
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/BasicError'
    ServiceUnavailable:
      description: 'Temporary state when the service is temporarily unavailable, overloaded or there is a maintenance window'
  schemas:
    AcceptedPayment:
      type: object
      description: 'The structure contains values for applied rewards, vouchers, discounts, and other benefits'
      properties:
        recommended_discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountItem'
          readOnly: true
          description: The list of offered discounts excludes rewards (Loyalty Status Discount)
        credit_points:
          type: number
          format: float
          readOnly: true
          description: Amount of used points
          example: 0
        price_of_credit_points:
          type: number
          format: float
          readOnly: true
          description: Amount of money corresponding to the number of used points
          example: 0
        credit:
          type: number
          format: float
          readOnly: true
          description: Amount of used credits
          example: 0
        benefit_codes:
          type: array
          items:
            $ref: '#/components/schemas/PaymentVoucher'
          readOnly: true
          description: List of applied vouchers on the current bill (includes the value of discount) independent of DiscountItem
        credit_points_of_this_transaction:
          type: number
          format: float
          readOnly: true
          description: Sum of points gained from this transaction
          example: 0
        total_credit_points:
          type: number
          format: float
          readOnly: true
          description: Amount of the points on the customer account (after the recent purchase is closed)
          example: 0
        total_credit:
          type: number
          format: float
          readOnly: true
          description: Amount of the credits on the customer account (after the recent purchase is closed)
          example: 960
        messages:
          type: array
          items:
            $ref: '#/components/schemas/CashierMessage'
          readOnly: true
          description: A recommendation messages for the cashier in his language localization
    Address:
      type: object
      description: Address resource
      properties:
        address1:
          type: string
          description: Street name of the address
          example: Old Town Square
        address2:
          type: string
          description: Street number (Land registry number)
          example: '34'
        address3:
          type: string
          description: House number
          example: ''
        address4:
          type: string
          description: Next address data
          example: ''
        address5:
          type: string
          description: Next address data
          example: ''
        address6:
          type: string
          description: Next address data
          example: ''
        address7:
          type: string
          description: Next address data
          example: ''
        zip:
          type: string
          description: ZIP code
          example: '11000'
        city:
          type: string
          description: City
          example: Prague 1
        country_code:
          type: string
          description: ISO code of the country *Possible values de / gb / us / it / cz / etc.*
          example: cz
    Agreement:
      type: object
      description: Customer's consents
      properties:
        agreement_gtc:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: 'Consent to General Terms & Conditions *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*'
          example: 1
        agreement_profiling:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: 'Consent to profiling *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*'
          example: 1
        agreement_marketing_communication:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: 'Consent to marketing communication *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*'
          example: 1
        custom_agreements:
          type: array
          items:
            $ref: '#/components/schemas/CustomAgreements'
          readOnly: false
          description: Custom agreements
    AgreementList:
      type: object
      properties:
        agreement_id:
          type: string
          readOnly: true
          description: The unique id of the agreement in CareCloud
          example: 81eaeea13b8984a169c490a325
        name:
          type: string
          readOnly: true
          description: Name of the agreement in CareCloud
          example: GDPR agreement
        text:
          type: string
          readOnly: true
          description: Text of the agreement in CareCloud. Language version of text is returned by language setup in HTTP header of the request.
          example: '<h1>Souhlas se zpracováním osobních údajů<\/h1><p>Tímto se dobrovolně a svobodně registruji do systému card a uděluji souhlas se zpracováním osobních údajů poskytnutých při registraci, jakožto i dalších osobních údajů získaných při obchodním styku a v souvislosti s členstvím v systému za účelem:<\/p><h2>Operací spojených s provozováním systému card<\/h2><ul><li>Zařazení do databáze členů card systému<\/li><li>Nabízení slev členům systému (zvýhodněné ceny a zboží, sbírání bodů)<\/li><li>Zasílání obchodních sdělení<\/li><\/ul>'
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change (YYYY-MM-DD HH:MM:SS)'
          example: '2018-05-07 14:26:19.215774'
    Bill:
      type: object
      description: Structure of bill from POS
      properties:
        bill_id:
          type: string
          readOnly: false
          description: 'Identification number of the bill (must be unique in POS, use prefix ''C'' for a canceled bill)'
          example: 8fbea1c1eaa8edd35e7f278
        bill_number:
          type: string
          readOnly: false
          description: 'Alternative identification of the bill. In the case of cancelation, there should be bill_id from the original bill.'
          example: null
        payment_time:
          type: string
          readOnly: false
          description: 'Date and time of bill creation *Possible value: 2016-06-30T15:51:49+02:00*'
          example: '2016-06-30T15:5:49+02:00'
        created_by:
          type: string
          readOnly: false
          description: Name of the user who created a bill
          example: null
        currency_id:
          type: string
          readOnly: false
          description: 'Id of the currency from resource [currencies](#tag/Currencies)'
          example: 8bed991c6a470eaaffbf048
        total_price:
          type: number
          format: float
          readOnly: false
          description: The total price of the bill as a sum of all items
          example: '700'
        utm:
          type: object
          $ref: '#/components/schemas/UTM'
          readOnly: false
          description: UTM structure for data from email campaign
        bill_items:
          type: array
          items:
            $ref: '#/components/schemas/BillItem'
          readOnly: false
          description: List of bill items
      required:
        - bill_id
        - payment_time
        - currency_id
        - total_price
        - bill_items
    BillItem:
      type: object
      description: Bill item structure
      properties:
        plu_ids:
          type: array
          items:
            $ref: '#/components/schemas/PluId'
          readOnly: false
          description: An array of all available pluIds from the particular product lists (default is Product ID from Global product list (consist cleaned data - unique id for every product across all POS systems))
        plu_name:
          type: string
          readOnly: false
          description: Product name
          example: qwer
        category_plu_id:
          type: string
          readOnly: false
          description: Product category ID from Global product list (consist cleaned data - unique id for every category across all POS systems)
          example: 8fbea1c1ea8edda5e67f27Q
        vat_rate:
          type: number
          format: float
          readOnly: false
          description: VAT rate of the item
          example: 4
        quantity:
          type: number
          format: float
          readOnly: false
          description: Quantity of product
          example: 2
        paid_amount:
          type: number
          format: float
          readOnly: false
          description: Real money value (unit price * quantity) paid by the customer (The value for a pharmaceutical client could have a copayment for drug prescription or money value of drugs not covered by an insurer).
          example: 6
        price:
          type: number
          format: float
          readOnly: false
          description: 'Value of parameter "paid_amount". In the case of a pharmaceutical client, add to the value of "paid_amount" a value of money covered by the customer''s health insurance.'
          example: 4
        bill_item_id:
          type: string
          readOnly: false
          description: ID of the bill item
          example: 6fd73167342d6899c415320
        loyalty_off:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: 'Switch off all loyalty benefits (points, discounts- instant and campaign prices, vouchers) on the item'
          example: true
        purchase_item_type_id:
          type: string
          readOnly: false
          description: 'Type of the purchase item from resource [purchase-item-types](#tag/Purchase-item-types)'
          example: 89d3d433c86ec59fe51b18a
        customer_id:
          type: string
          readOnly: false
          description: The ID of the customer
          example: 89ac83ca207a820c62c79bf03a
      required:
        - plu_ids
        - plu_name
        - category_plu_id
        - vat_rate
        - quantity
        - paid_amount
        - price
        - bill_item_id
        - loyalty_off
        - purchase_item_type_id
    Campaign:
      type: object
      description: Campaign resource
      properties:
        idcampaign:
          type: string
          readOnly: true
          description: The unique id of the campaign
          example: 8edebb6b9d299c59804b2aa812
        external_id:
          type: string
          readOnly: false
          description: The external id of the campaign
          example: 288684441
        parent_id:
          type: string
          readOnly: false
          description: Id of the parent campaign
          example: 8fd17bf437555cf56a6ecf05fc
        name:
          type: string
          readOnly: false
          description: Name of the campaign
          example: REST campaign
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-10-24 19:09:30'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the campaign
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
    CampaignProduct:
      type: object
      description: Campaign product structure
      properties:
        campaign_product_id:
          type: string
          readOnly: true
          description: The unique id for the campaign product
          example: 8bed991c68a470e7aaeff
        product_id:
          type: string
          readOnly: false
          description: The unique id for the product
          example: 80bfce6e94829c8df40
        currency_id:
          type: string
          readOnly: false
          description: The unique id for the currency
          example: 86e05affc7a7abefc
        campaign_id:
          type: string
          readOnly: false
          description: The unique id for the campaign
          example: 8bed991c68a470e7aaeffbf048
        value:
          type: number
          format: float
          readOnly: false
          description: Value of the product
          example: 100
        value_type_id:
          type: integer
          enum:
            - 1
            - 2
          readOnly: false
          description: 'Type of value (1 - percentage discount value, 2 - final price)'
          example: 2
        valid_from:
          type: string
          readOnly: false
          description: 'Valid from *(YYYY-MM-DD HH:MM:SS)*'
          example: '2018-11-19 00:00:00'
        valid_to:
          type: string
          readOnly: false
          description: 'Valid to *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-01-05 23:59:59'
        display_in:
          type: array
          items:
            type: string
          readOnly: false
          description: List of possible display places
          example:
            - cash_desk
            - web
        type_id:
          type: string
          readOnly: false
          description: Type of a campaign product
          example: 81eaeea13b8984a169c490a325
        presentation_data:
          type: object
          $ref: '#/components/schemas/CampaignPresentationData'
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: 2013-08-19T16:28:03.978Z
        state:
          type: integer
          enum:
            - 0
            - 1
          readOnly: true
          description: |
            State of the card
            *Possible values are: 0 - blocked / 1 - active*
          example: 1
      required:
        - product_id
        - currency_id
        - campaign_id
        - value
        - value_type_id
        - valid_from
        - valid_to
        - type_id
        - presentation_data
    CampaignPresentationData:
      type: object
      description: Campaign presentation data structure
      properties:
        name:
          type: string
          readOnly: false
          description: Name of the product
          example: T-shirt 10% off
        subtitle:
          type: string
          readOnly: false
          description: Text of the campaign product subtitle
          example: Discount only in following week
        note:
          type: string
          readOnly: false
          description: Text of the campaign product note
          example: This offer is limited
        description:
          type: string
          readOnly: false
          description: Text of the campaign product description
          example: null
        image_url:
          type: string
          readOnly: false
          description: URL address of the image
          example: 'https://developer.crmcarecloud.com/images/campaign.jpg'
      required:
        - name
    CampaignProductStoreRecord:
      type: object
      description: Campaign product store record
      properties:
        campaign_product_store_record_id:
          type: string
          readOnly: true
          description: The unique id for the campaing product store record.
          example: 88c774183f5c3e413b3ba570f8
        store_id:
          type: string
          readOnly: false
          description: The unique id of the store.
          example: 8fdd651ff3f615bcebebad87ce
        campaign_product_id:
          type: string
          readOnly: false
          description: The unique id of the campaign product.
          example: 8fdce3475560d56e95a6ab035c
      required:
        - store_id
        - campaign_product_id
    Card:
      type: object
      description: Card resource
      properties:
        card_id:
          type: string
          readOnly: true
          description: The unique id for the card
          example: 81a94c48474bc45c03d41f7016
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the card holder.
          example: 81ceb8582e2d8dbb7e71b7273b
        card_type_id:
          type: string
          readOnly: false
          description: The unique id for the card type.
          example: 8bed991c68a470e7aaeffbf048
        card_number:
          type: string
          readOnly: false
          description: Card number
          example: 200120000290
        valid_from:
          type: string
          readOnly: false
          description: 'Card validity from *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-07-05'
        valid_to:
          type: string
          readOnly: false
          description: 'Card validity to *(YYYY-MM-DD HH:MM:SS)*'
          example: '2059-07-05'
        store_id:
          type: string
          readOnly: false
          description: 'The unique id for the store, where the card was assigned to a customer'
          example: null
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-07-15 17:26:34'
        state:
          type: integer
          enum:
            - 0
            - 1
          readOnly: false
          description: |
            State of the card
            *Possible values are: 0 - blocked / 1 - active*
          example: 1
      required:
        - card_type_id
        - card_number
        - state
    CardType:
      type: object
      description: CardType resource
      properties:
        card_type_id:
          type: string
          readOnly: true
          description: The unique id for the card type.
          example: 8fd17bf437555cf56a6ecf05fc
        name:
          type: string
          readOnly: false
          description: Name of the card type
          example: REST API card type
        prefix:
          type: string
          readOnly: false
          description: Prefix of the specific card type cards
          example: '12'
      required:
        - name
        - prefix
    CashierMessage:
      type: object
      description: Cashier message structure
      properties:
        text:
          type: string
          readOnly: true
          description: Text of the message
          example: null
    Currency:
      type: object
      description: Currency resource
      properties:
        currency_id:
          type: string
          readOnly: true
          description: The unique id for the currency
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the currency
          example: CZK
        code:
          type: string
          readOnly: false
          description: International ISO code of the currency
          example: CZK
      required:
        - currency_id
        - name
        - code
    CustomAgreements:
      type: object
      description: Custom agreements
      properties:
        agreement_id:
          type: string
          description: The unique id of the agreement in CareCloud
          example: custom_agreement_id
        agreement_value:
          type: integer
          enum:
            - 0
            - 1
            - 2
          description: 'Value of the specific agreement *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*'
          example: 2
      required:
        - agreement_id
        - agreement_value
    Customer:
      type: object
      description: Basic information about a customer
      properties:
        customer_id:
          type: string
          readOnly: true
          description: The unique id of the customer
          example: 8ea6abece4cd0a4ded0a29f093
        personal_information:
          type: object
          $ref: '#/components/schemas/PersonalInformation'
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change (YYYY-MM-DD HH:MM:SS)'
          example: '2019-06-23 11:47:22'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: 'State of the customer *Possible values are: 0 - deleted / 1 - active / 2 - non active*'
          example: 1
      required:
        - personal_information
    CustomerResult:
      type: object
      description: Search results for strict mode
      properties:
        customer_id:
          type: string
          readOnly: true
          description: The unique id of the customer
          example: 8ea6abece4cd0a4ded0a29f093
        match:
          type: integer
          readOnly: true
          description: Percentage of match of the search parameters
          example: 100
    CustomerRelationType:
      type: object
      description: Customer relation type structure
      properties:
        customer_relation_type_id:
          type: string
          readOnly: true
          description: The unique id of the customer relation type
          example: 8bed991c68a470e7aaefff048
        name:
          type: string
          readOnly: false
          description: Name of the customer relation type
          example: Family
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2021-03-03 18:07:14'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the customer relation type
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
    CustomerSearchResult:
      type: object
      description: Result of the search
      properties:
        strict:
          type: array
          description: Search results for strict mode
          items:
            $ref: '#/components/schemas/CustomerResult'
    CustomerSource:
      type: object
      description: |
        Customer source structure

        *Structure is dedicated for resource customer-sources.*
      properties:
        customer_source_id:
          type: string
          readOnly: false
          description: The unique id of the customer source
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the customer source
          example: All resources
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-01-08 18:34:07'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the customer source
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - customer_source_id
        - name
    CustomerSourceRecord:
      type: object
      description: Customer source
      properties:
        customer_source_record_id:
          type: string
          description: The unique id of the customer source record.
          readOnly: true
          example: 8fdce3475560d56e95a6ab035r
        customer_source_id:
          type: string
          description: The unique id of the customer source. It identifies the system where the customer belongs or the customer account was created
          readOnly: false
          example: 8fdce3475560d56e95a6ab035r
        customer_id:
          type: string
          readOnly: true
          description: The unique id of the customer
          example: 8ea6abece4cd0a4ded0a29f093
        external_id:
          type: string
          description: The unique external id of the customer. It may be id from the other system
          readOnly: false
          example: null
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change (YYYY-MM-DD HH:MM:SS)'
          example: '2019-06-23 11:47:22'
      required:
        - customer_source_id
    Customer-type:
      type: object
      description: Customer type structure
      properties:
        type_id:
          type: string
          readOnly: true
          description: The unique id of the customer type
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: true
          description: Name of the customer type
          example: club
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2017-12-01 14:29:41'
    Device:
      type: object
      description: Structure describes client's device
      properties:
        device_id:
          type: string
          readOnly: false
          description: The unique id of the client device
          example: '123456'
        device_system:
          type: string
          readOnly: false
          description: Operation system of the device
          example: OSX
        device_name:
          type: string
          readOnly: false
          description: The name of the device
          example: Test device
        device_type:
          type: string
          readOnly: false
          description: Type of device by producer (product line)
          example: iPhone
      required:
        - device_id
        - device_system
        - device_name
        - device_type
    DiscountItem:
      type: object
      description: Discount item structure
      properties:
        discount_code:
          type: string
          readOnly: false
          description: Code of discount (set value “offline” for offline mode discounts)
          example: null
        discount_value:
          type: string
          readOnly: false
          description: Value of discount in the currency of the bill
          example: null
        discount_percent:
          type: string
          readOnly: false
          description: Discount percentage of the bill
          example: null
        description:
          type: string
          readOnly: false
          description: Text description of the discount reason
          example: null
        bill_item_id:
          type: string
          readOnly: false
          description: ID of the related bill item
          example: null
      required:
        - bill_item_id
    Event:
      type: object
      description: Event resource
      properties:
        event_id:
          type: string
          readOnly: true
          description: The unique id of the event
          example: 8bed991c68a470e7aaeffbf048
        event_type_id:
          type: string
          readOnly: false
          description: The unique id of the event type
          example: 8bed991c68a470e7aaeffbf048
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the card holder.
          example: 81ceb8582e2d8dbb7e71b7273b
        external_id:
          type: string
          readOnly: false
          description: The unique external id of the event. It may be id from other system
          example: 157613
        data:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
            - type: object
          readOnly: false
          description: Additional data of the event. Serialized data in JSON
          example: '{"test":10,"test2":20}'
        created_at:
          type: string
          readOnly: false
          description: 'Date and time of the event *(YYYY-MM-DD HH:MM:SS)*'
          example: '2017-06-20 16:59:49'
        secondary_external_id:
          type: string
          readOnly: false
          description: 'Additional external id of the event. It''s used in case, when differentiation of external_id needed'
          example: null
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the event type
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - event_type_id
        - customer_id
        - external_id
    EventGroup:
      type: object
      description: Event group resource
      properties:
        event_group_id:
          type: string
          readOnly: false
          description: The unique id of the event
          example: 86e05affc7a7abefc513ab4tt0
        name:
          type: string
          readOnly: false
          description: The unique id of the event type
          example: Shopping Cart
        text_id:
          type: string
          readOnly: true
          description: Text id of an event group
          example: shopping_cart
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the event type
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - event_group_id
    EventType:
      type: object
      description: Event type resource
      properties:
        event_type_id:
          type: string
          readOnly: false
          description: The unique id of the event type
          example: 82d0f9d976dee39aac13dc7ea
        event_group_id:
          type: string
          readOnly: false
          description: Id of the event type group
          example: 8bed991c68a470eaaeffbf048
        name:
          type: string
          readOnly: false
          description: Name of the event type
          example: Voucher
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the property
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - event_type_id
        - event_group_id
    ExternalApplication:
      type: object
      description: External application structure
      properties:
        external_application_id:
          type: string
          readOnly: false
          description: The unique id of the client external application
          example: 89d1a6111b3fb6e74665d948
        name:
          type: string
          readOnly: false
          description: The name of the external application
          example: mobile app
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-07-01 14:04:25'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the external application
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - external_application_id
        - name
    ExternalCode:
      type: object
      description: External code resource
      properties:
        external_code_type_id:
          type: integer
          readOnly: false
          description: The unique id of the external code type (provided by your account manager)
          example: 1
          default: 1
        value:
          type: string
          readOnly: false
          description: Value of external code
          example: '2107225110'
      required:
        - external_code_type_id
        - value
    FinalBill:
      type: object
      description: Final bill structure
      properties:
        fiscal:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: 'Information, whether it is a fiscal bill'
          example: true
        purchase_type_id:
          type: integer
          readOnly: false
          description: 'Type of the purchase. Values are available in resource [purchase-types](#tag/Purchase-types)'
          example: 86e05affc7a7abefzcd513ab00
        canceled:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: 'Information, whether it is the cancellation of the purchase. It is the only parameter that identifies the canceled purchase. All other values are the same as in the original bill. No different values like totalPrice, quantity, paidAmount, and itemPrice are changed nor inverted.'
          example: false
        payment_type:
          type: string
          enum:
            - S
            - P
            - C
            - D
          readOnly: false
          description: |
            The method of the bill closure.
            *Possible values are: “S” - standard / “P”- use points for payment / “C” - use credits for payment / “D”- use discount now*
          example: S
        payment_recap:
          type: object
          $ref: '#/components/schemas/PaymentRecap'
          readOnly: false
        bill_id:
          type: string
          readOnly: false
          description: 'Identification number of the bill (must be unique in POS, use prefix ''C'' for a canceled bill)'
          example: 8fbea1c1eaa8edd35e7f278
        bill_number:
          type: string
          readOnly: false
          description: 'Alternative identification of the bill. In the case of cancelation, there should be bill_id from the original bill.'
          example: null
        payment_time:
          type: string
          readOnly: false
          description: 'Date and time of bill creation *Possible value: 2016-06-30T15:51:49+02:00*'
          example: '2016-06-30T15:5:49+02:00'
        created_by:
          type: string
          readOnly: false
          description: Name of the user who created a bill
          example: null
        currency_id:
          type: string
          readOnly: false
          description: 'Id of the currency from resource [currencies](#tag/Currencies)'
          example: 8bed991c6a470eaaffbf048
        total_price:
          type: number
          format: float
          readOnly: false
          description: The total price of the bill as a sum of all items
          example: '700'
        utm:
          type: object
          $ref: '#/components/schemas/UTM'
          readOnly: false
          description: UTM structure for data from email campaign
        bill_items:
          type: array
          items:
            $ref: '#/components/schemas/BillItem'
          readOnly: false
          description: List of bill items
      required:
        - bill_id
        - payment_time
        - currency_id
        - total_price
        - bill_items
        - fiscal
        - purchase_type_id
        - canceled
        - payment_type
    Flag:
      type: object
      description: Flag resource
      properties:
        name:
          type: string
          readOnly: false
          description: Name of the flag
          example: null
        text_id:
          type: string
          readOnly: false
          description: The unique id for the flag
          example: null
      required:
        - name
        - text_id
    GPSCoordinates:
      type: object
      description: GPS coordinates of the store
      properties:
        gps_longitude:
          type: number
          format: float
          readOnly: false
          description: GPS longitude
          example: 0
        gps_latitude:
          type: number
          format: float
          readOnly: false
          description: GPS latitude
          example: 0
      required:
        - gps_longitude
        - gps_latitude
    Interest:
      type: object
      description: Interest structure
      properties:
        interest_id:
          type: string
          readOnly: true
          description: The unique id for the interest
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: true
          description: Name of the interest
          example: Common stuff
    InterestRecord:
      type: object
      description: Customer interest record
      properties:
        interest_record_id:
          type: string
          readOnly: true
          description: The unique id for the interest record
          example: 87d934c86a6303f5fb4d1214fb
        interest_id:
          type: string
          readOnly: false
          description: The unique id of the interest
          example: 81eaeea13b8984a169c490a325
        customer_id:
          type: string
          readOnly: false
          description: The unique id of the customer
          example: 89ac83ca207a820c62c79bf03a
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-08-06 10:31:09'
      required:
        - interest_id
        - customer_id
    Language:
      type: object
      description: Language structure
      properties:
        language_id:
          type: string
          readOnly: true
          description: The unique id of the language code by ISO 639-1
          example: cs
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the event type
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2017-03-24 15:29:47"'
    Message:
      type: object
      description: Message resource
      properties:
        message_id:
          type: string
          readOnly: true
          description: The unique id of the message
          example: 89ce2a1b9b01f5c939fb1e20cd
        status:
          type: integer
          enum:
            - 0
            - 1
            - -1
            - 2
            - 4
          readOnly: true
          description: |
            The status id of the message.
            *Possible values are: 0 - message was not send / 1- message was send successfully / -1 message was not recieved (it was returned) / 2 - an error occured while sending / 4 - customer has no agreements (GDPR)*
          example: 1
        message_template_id:
          type: string
          readOnly: false
          description: The unique id of the message_template
          example: 8cbb5886e1d68e07a6e0e393a0
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the card holder.
          example: 81ceb8582e2d8dbb7e71b7273b
        contact:
          type: string
          readOnly: false
          description: Email address or phone number of customer in case of send message to different contact than customer has in database
          example: happy_customer@crmcarecloud.com
        title:
          type: string
          readOnly: true
          description: Subject of the email message/ Title of notification message / Preview of the text message . Mandatory only in case of email template
          example: Newsletter no. 30
        send_time:
          type: string
          readOnly: true
          description: 'Date and time when message was send from server to recipient *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-05 11:24:12'
        opened_time:
          type: string
          readOnly: true
          description: 'Date and time when message was opened by recipient *(YYYY-MM-DD HH:MM:SS)*'
          example: null
        mail_client_user_agent:
          type: string
          readOnly: true
          description: User agent of the mail client application where message was opened
          example: null
        mail_client_language:
          type: string
          readOnly: true
          description: Language of the mail client application where message was opened
          example: null
        communication_channel_id:
          type: integer
          enum:
            - 1
            - 2
            - 4
            - 5
          readOnly: false
          description: 'The unique id of the communication channel. *Possible values are: 1 - email / 2- SMS / 4 - PUSH notification (Apple or Google)/ 5 - internal system notification*'
          example: 1
        message_data:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          readOnly: false
          description: Message data could contains array of customized paramteres. They may have influence on message display or add values to message
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-05 11:24:12'
      required:
        - message_template_id
        - customer_id
        - communication_channel_id
    MessageDetail:
      type: object
      description: Message detail resource
      properties:
        plain_text_body:
          type: string
          readOnly: true
          description: Plain text body of the message
          example: |-
            Text orci lorem, maximus ac tortor at, feugiat libero. Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
            Donec quam augue, gravida vitae imperdiet a, fermentum et est. Sed sit amet sem pharetra, porta ipsum vel, hendrerit diam. 
            Nunc orci lorem, maximus ac tortor at, feugiat vestibulum libero. Sed vestibulum leo at odio varius, ut hendrerit ante viverra.
            Nunc orci lorem, maximus ac tortor at, feugiat vestibulum libero. Sed vestibulum leo at odio varius, ut hendrerit ante viverra.
            Lorem ipsum dolor sit amet libero.
        html_body:
          type: string
          readOnly: true
          description: HTML body of the message
          example: ''
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-05 14:00:41'
      required:
        - plain_text_body
        - html_body
    MessageTemplate:
      type: object
      description: Message template resource
      properties:
        message_template_id:
          type: string
          readOnly: true
          description: The unique id of the message_template
          example: 8cbb5886e1d68e07a6e0e393a0
        consent_free_template:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: 'If true, customer can recieve message without any consent(GDPR, etc.)'
          example: false
        subject:
          type: string
          readOnly: true
          description: Subject of the message template. Mandatory only in case of email template
          example: Hotels
        sender:
          type: string
          readOnly: true
          description: Sender of the message template
          example: <info@crmcarecloud.com>
        name:
          type: string
          readOnly: true
          description: Name of the message template
          example: Náezv
        message_template_group_id:
          type: integer
          enum:
            - 1
            - 2
            - 3
          readOnly: true
          description: 'The unique id of the message template group. *Possible values are: 1 - newsletter template / 2- system template(registration message, order summary message, etc.) / 3 - transactional communication(for hotel, traveling,...)*'
          example: 1
        communication_channel_id:
          type: integer
          enum:
            - 1
            - 2
            - 4
            - 5
          readOnly: true
          description: 'The unique id of the communication channel. *Possible values are: 1 - email / 2- SMS / 4 - PUSH notification (Apple or Google)/ 5 - internal system notification*'
          example: 1
        template_data:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          readOnly: false
          description: Template data could contains array of customized paramteres. They may have influence on template display or add values to template
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2016-05-04 11:29:10'
      required:
        - subject
        - sender
        - name
        - message_template_group_id
        - communication_channel_id
    OpeningDay:
      type: object
      description: Opening day structure
      properties:
        day_id:
          type: string
          readOnly: false
          description: The unique id of the day of the week
          example: MON
        time_intervals:
          type: array
          items:
            $ref: '#/components/schemas/TimeInterval'
          readOnly: false
          description: List of time Intervals
      required:
        - day_id
        - time_intervals
    Order:
      type: object
      description: Order resource
      properties:
        order_id:
          type: string
          readOnly: true
          description: The unique id of the order
          example: 80af8a5dcc0702daf336f4de41
        order_number:
          type: string
          readOnly: false
          description: 'External order number. If not set, internal order number will be set'
          example: A3NKI89NFDS82434B
        customer_id:
          type: string
          readOnly: false
          description: 'The unique id of the customer, owner of the order'
          example: 87a6f37e138c1ef18918e747d
        currency_id:
          type: string
          readOnly: false
          description: Id of currency
          example: 8bed991c68a470eaaeffbf048
        total_price:
          type: number
          format: float
          readOnly: false
          description: Total price of the order
          example: '36.00'
        discount_codes:
          type: array
          items:
            type: string
          readOnly: false
          description: Discount codes used in order
          example: null
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: false
          description: List of the OrderItems
        invoicing_data:
          type: object
          $ref: '#/components/schemas/OrderInvoicing'
          readOnly: false
        shipping_data:
          type: object
          $ref: '#/components/schemas/OrderShipping'
          readOnly: false
        customer_note:
          type: string
          readOnly: false
          description: Customer’s note for the merchant
          example: Have a nice day!
        order_status:
          type: string
          readOnly: true
          description: Text representation of the order status
          example: New Uncomfirmed
        shipping_date:
          type: string
          readOnly: true
          description: 'Date of the order shipping. If the date is in future, order should be shipped in this date'
          example: '2019-07-19 17:26:34'
        program_ranking:
          type: integer
          readOnly: true
          description: Rank of order in case of the series of multiple orders
          example: 4
        payment_status:
          type: string
          readOnly: true
          description: Text representation of the payment status
          example: Unpaid
        invoice_document_url:
          type: string
          readOnly: true
          description: URL address with the invoice PDF
          example: 'https://example.crmcarecloud.com/invoices/1c68a470eaaeff'
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-07-15 17:26:34'
      required:
        - customer_id
        - currency_id
        - total_price
        - order_items
        - invoicing_data
    OrderInvoicing:
      type: object
      description: Structure of OrderInvoicing. Contains neccessery data for invoicing of the order
      properties:
        payment_id:
          type: string
          readOnly: false
          description: The unique id of the payment
          example: 8bd481170064960b1788109b8
        paid_date:
          type: string
          readOnly: false
          description: 'Date and time of the order payment *(YYYY-MM-DD HH:MM:SS)*'
          example: '2021-07-15 13:26:34'
        personal_information:
          type: object
          $ref: '#/components/schemas/PersonalInformation'
      required:
        - payment_id
    OrderItem:
      type: object
      description: Order item resource
      properties:
        order_item_id:
          type: string
          readOnly: true
          description: The unique id of the order item
          example: null
        product_variant_id:
          type: string
          readOnly: false
          description: The unique id of the webshop product
          example: 8fcc724e1514dafb0a70228d3
        customer_id:
          type: string
          readOnly: false
          description: 'The unique id of the customer, owner of the order item. If not set, customer_id from order will be saved'
          example: null
        amount:
          type: number
          format: float
          readOnly: false
          description: Amount of products in order item
          example: 1
        unit_price:
          type: number
          format: float
          readOnly: false
          description: Unit price of the ordered product
          example: 36
        vat_rate:
          type: number
          format: float
          readOnly: false
          description: The rate of the VAT of the ordered product
          example: 19
      required:
        - product_variant_id
        - amount
        - unit_price
        - vat_rate
    OrderShipping:
      type: object
      description: Structure of OrderShipping. Contains neccessery data for shipping of the order
      properties:
        shipping_id:
          type: string
          readOnly: false
          description: The unique id of the shipping
          example: 81eaeea13b8984a69c490a325
        contact_firstname:
          type: string
          readOnly: false
          description: First name of the contact for shipping
          example: John
        contact_lastname:
          type: string
          readOnly: false
          description: Last name of the contact for shipping
          example: Smith
        phone:
          type: string
          readOnly: false
          description: Phone number of the contact with international prefix (420000000)
          example: 38612345678
        address:
          type: object
          $ref: '#/components/schemas/Address'
      required:
        - shipping_id
    Parameter:
      type: object
      description: Parameter resource
      properties:
        parameter_name:
          type: string
          readOnly: false
          description: Name of the paramter
          example: null
        value:
          type: string
          readOnly: false
          description: Value of the paramter
          example: null
      required:
        - parameter_name
        - value
    Partner:
      type: object
      description: Partner resource
      properties:
        partner_id:
          type: string
          readOnly: true
          description: The unique id of the company
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the company
          example: Demo
        address:
          type: object
          $ref: '#/components/schemas/Address'
          description: Address of the company
        registration_id:
          type: string
          readOnly: false
          description: Company registration number. National Registration unique id for the company.
          example: '123456789'
        vat_id:
          type: string
          readOnly: false
          description: VAT registration number. Value Added Tax unique id for the company.
          example: '123456789'
        email:
          type: string
          readOnly: false
          description: Email of the company
          example: happy_user@crmcarecloud.com
        phone:
          type: string
          readOnly: false
          description: Phone number of the company with international prefix (420000000)
          example: '123456787'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: |
            State of the partner
            *Possible values are: 0 - deleted / 1- active / 2 - non active*
          example: 1
      required:
        - name
    PaymentRecap:
      type: object
      description: Alternative payment methods summary
      properties:
        credit_points:
          type: number
          format: float
          readOnly: false
          description: Amount of the points used for payment of the bill
          example: 7
        amount_for_credit:
          type: number
          format: float
          readOnly: false
          description: Amount of the credits used for payment of the bill
          example: 4.2
        vouchers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentVoucher'
          readOnly: false
          description: List of used vouchers for payment of bills
        recommended_discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountItem'
          readOnly: false
          description: List of applied discounts where the service did not use the voucher
    PaymentVoucher:
      type: object
      description: Payment voucher structure
      properties:
        code:
          type: string
          readOnly: false
          description: Code of a reward or a voucher used in purchase
          example: null
        name:
          type: string
          readOnly: false
          description: Name of the reward
          example: null
        discount_value:
          type: number
          format: float
          readOnly: false
          description: Value of discount in the currency of the bill
          example: null
        discount_percent:
          type: number
          format: float
          readOnly: false
          description: Value of discount in percent
          example: null
        bill_item_id:
          type: string
          readOnly: false
          description: ID of the related bill item
          example: null
    PersonalInformation:
      type: object
      description: Personal information of the customer
      properties:
        gender:
          type: integer
          enum:
            - 1
            - 2
          readOnly: false
          description: 'Gender of the customer *Possible values: 1 - male, 2 - female*'
          example: 1
        first_name:
          type: string
          readOnly: false
          description: First name of the customer
          example: John
        last_name:
          type: string
          readOnly: false
          description: Last name of the customer
          example: Smith
        birthdate:
          type: string
          format: date
          readOnly: false
          description: Customer's date of birth (YYYY-MM-DD)
          example: '1985-02-12'
        email:
          type: string
          pattern: '^[-a-z0-9!#$%&\''*+\\/=?^_`{|}~]+(\\.[-a-z0-9!#$%&\''*+\\/=?^_`{|}~]+)*@([a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?\\.)+[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])$'
          readOnly: false
          description: Email of the customer
          example: happy_customer@crmcarecloud.com
        phone:
          type: string
          pattern: '^[1-9][0-9]*$'
          readOnly: false
          description: Phone number of the customer with international prefix (420000000000)
          example: 420523828931
        language_id:
          type: string
          readOnly: false
          description: The unique id for the language by ISO 639 code
          example: en
        store_id:
          type: string
          readOnly: false
          description: The unique id for the original customer account store of registration
          example: 8bed991c68a4
        photo_url:
          type: string
          readOnly: false
          description: 'URL address of the customer photo. If customer has no photo, this parameter is not send'
          example: null
        address:
          type: object
          $ref: '#/components/schemas/Address'
        agreement:
          type: object
          $ref: '#/components/schemas/Agreement'
      required:
        - language_id
    PluId:
      type: object
      description: PLU Id structure
      properties:
        list_code:
          type: string
          readOnly: false
          description: 'Code of the particular product list (basic is code of Global product list (consist cleaned data - unique id for every product across all POS systems)). For example, “GLOBAL”, “SKU”, “PLU”, etc.'
          example: GLOBAL
        code:
          type: string
          readOnly: false
          description: Code of product from the product list (basic is Product ID from Global product list (consist cleaned data - unique id for every product across all POS systems))
          example: abc
      required:
        - list_code
        - code
    Point:
      type: object
      description: Customer point
      properties:
        point_id:
          type: string
          readOnly: true
          description: The unique id for the point record
          example: 84cae7e5cbba16e31b0fc5ef1c
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the customer.
          example: 81ceb8582e28dbb7e71b7273b
        assigned_points:
          type: number
          format: float
          readOnly: true
          description: The number of earned points
          example: 1208
        available_points:
          type: number
          format: float
          readOnly: true
          description: The number of points available actually taking into account the eventual points redemption
          example: 700
        point_type_id:
          type: string
          readOnly: false
          description: Type of the point record
          example: 86e05affc7a7abefcd513ab400
        partner_id:
          type: string
          readOnly: false
          description: The unique id for the partner company
          example: 86e05affc7a7abefcd513ab400
        valid_to:
          type: string
          readOnly: false
          description: 'Date and time of the point record validity to *(YYYY-MM-DD HH:MM:SS)*'
          example: null
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the point record
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - customer_id
        - point_type_id
        - partner_id
    PointReservation:
      type: object
      description: Points reservation resource
      properties:
        points_reservation_id:
          type: string
          readOnly: true
          description: The unique id of the point reservation record
          example: 88c1e91444434b0243d94b40cd
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the customer.
          example: 81ceb8582e28dbb7e71b7273b
        external_id:
          type: string
          readOnly: false
          description: The external unique id of the product brand
          example: '123459'
        quantity:
          type: number
          format: float
          readOnly: false
          description: The number of reserved points
          example: 11
        partner_id:
          type: string
          readOnly: false
          description: The unique id for the partner company
          example: 86e05affc7a7abefcd513ab400
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the point record
            *Possible values are: 0 - deleted / 1 - active / 2 - non active(expired)*
          example: 1
        expiration:
          type: string
          readOnly: false
          description: 'Date and time of the point reservation expiration *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-10-31 00:00:00'
      required:
        - customer_id
        - external_id
        - quantity
        - partner_id
    PointType:
      type: object
      description: Points reservation resource
      properties:
        point_type_id:
          type: string
          readOnly: true
          description: The unique id of the point type
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: true
          description: Name of the point type
          example: Cancellation
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-04-22 13:53:54'
    Product:
      type: object
      description: Product resource
      properties:
        product_id:
          type: string
          readOnly: true
          description: The unique id of the product
          example: 89bdacbffb5c82f2c52cb9ae8f
        name:
          type: string
          readOnly: false
          description: Name of the product
          example: Vodka tonic
        code:
          type: string
          readOnly: false
          description: Code of the product
          example: '649'
        external_id:
          type: string
          readOnly: false
          description: The external unique id of the product
          example: '668'
        product_group_id:
          type: string
          readOnly: false
          description: The unique id for the product group
          example: 85cfc89601efa1ba2c2aa3b6a0
        product_brand_id:
          type: string
          readOnly: false
          description: The unique id for the product brand
          example: null
        additional_properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRecord'
          readOnly: false
          description: List of additional properties
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2012-12-18 11:55:07'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the product
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
        - code
        - external_id
    ProductBrand:
      type: object
      description: Product brand resource
      properties:
        product_brand_id:
          type: string
          readOnly: true
          description: The unique id of the product brand
          example: 83d1d11ea3884a5d33253fe214
        name:
          type: string
          readOnly: false
          description: Name of the product brand
          example: The best brand
        external_id:
          type: string
          readOnly: false
          description: The external unique id of the product brand
          example: a5d332
      required:
        - name
        - external_id
    ProductGroup:
      type: object
      description: Product group resource
      properties:
        product_group_id:
          type: string
          readOnly: true
          description: The unique id of the product group
          example: 83d1d11ea3884a5d33253fe214
        name:
          type: string
          readOnly: false
          description: Name of the product group
          example: The best brand
        parent_product_group_id:
          type: string
          readOnly: false
          description: The unique id for the parent product group
          example: null
        code:
          type: string
          readOnly: false
          description: Code of the product group
          example: null
        external_id:
          type: string
          readOnly: false
          description: The external unique id of the product group
          example: '53'
        store_id:
          type: string
          readOnly: false
          description: The unique id for the store where the product group is valid. The product group is global if this value is not set
          example: 83d1d11ea3884a5d33253fe214
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-02-08 15:35:09'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the product group
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
        - external_id
    ProductReservation:
      type: object
      description: |
        Product reservation resource

        <p class="warning">⚠️Structure has to contain reservation codes or product reservation items</p>
      properties:
        product_reservation_id:
          type: string
          readOnly: true
          description: The unique id of the product reservation
          example: 81d503b99cc748b3ca189383ad
        customer_id:
          type: string
          readOnly: false
          description: 'The unique id of the customer, owner of the product reservation'
          example: 8eae20da24332e84611849f5cd
        store_id:
          type: string
          readOnly: false
          description: The unique id of the store tied to the reservation
          example: 86e05affc7a7abefcd513ab400
        reservation_codes:
          type: array
          items:
            type: string
          readOnly: true
          description: Ids of the reservation
          example:
            - 10
        external_reservation_codes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalCode'
          readOnly: false
          description: List of external id codes. Id codes can have different sources. For the list of id sources please contact your account manager.
        benefit_codes:
          type: array
          items:
            type: string
          readOnly: false
          description: 'List of the benefit (rewards, vouchers) codes used in a reservation. After the reservation is delivered, all benefits are applied on the customer''s account'
          example:
            - PTV116
            - PTV120
        product_reservation_source_id:
          type: string
          readOnly: false
          description: The unique id of the product reservation source
          example: 86e05affc7a7abefcd513ab400
        pickup_date:
          type: string
          readOnly: true
          description: Date of the reservation pickup in the tied store (YYYY-MM-DD)
          example: '2020-04-20'
        customers_note:
          type: string
          readOnly: false
          description: Customer’s note for the merchant
          example: null
        total_price:
          type: number
          format: float
          readOnly: false
          description: 'Total price of reservation If currency_id, than total_price is mandatory'
          example: 69
        currency_id:
          type: string
          readOnly: false
          description: 'Id of the currency. If total_price is set, than currency_id is mandatory'
          example: 8bed991c68a470e7aaeffbf048
        product_reservation_items:
          type: array
          items:
            $ref: '#/components/schemas/ProductReservationItem'
          readOnly: false
          description: List of the Product Reservation Items
        external_purchase_id:
          type: string
          readOnly: false
          description: The unique external id of the purchase
          example: null
        utm:
          type: object
          $ref: '#/components/schemas/UTM'
          readOnly: false
          description: UTM structure for data from email campaign
        actual_state:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 2
            - 4
            - 5
            - 6
            - 7
            - 8
          readOnly: true
          description: |
            Actual state of the product reservation.
            *Possible values: 0 - Canceled / 1 - Entered / 2 - Accepted / 3 - Ready / 4 - Delivered / 5 - In progress / 6 - Not Picked up / 7 - Ordered / 8 - Being solved /*
          example: 5
        states:
          type: array
          items:
            type: string
          readOnly: true
          description: History of the state values. States are sorted in descending order by time
          example: []
        comments:
          type: array
          items:
            type: string
          readOnly: true
          description: Reservation comments. Comments are sorted in descending order by time
          example:
            - test
            - test
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-04-20 11:23:35'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the product reservation
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - customer_id
        - store_id
        - product_reservation_source_id
    ProductReservationItem:
      type: object
      description: External code resource
      properties:
        reservable_product_id:
          type: string
          readOnly: false
          description: The unique id of the reservable product in CareCloud
          example: 85aee4e91a07d60626f7abcb21
        amount:
          type: number
          format: float
          readOnly: false
          description: Number of the reserved products
          example: 3
        unit_price:
          type: number
          format: float
          readOnly: false
          description: 'Unit price of the reserved product. If vat_rate is set, than unit_price is mandatory'
          example: 23
        vat_rate:
          type: number
          format: float
          readOnly: false
          description: 'The rate of the VAT of the reserved product. If unit_price is set, than vat_rate is mandatory'
          example: 5
      required:
        - reservable_product_id
        - amount
    ProductReservationSource:
      type: object
      description: Product reservation source resource
      properties:
        product_reservation_source_id:
          type: string
          readOnly: true
          description: The unique id of the product reservation source
          example: 8bed991c68a470e7aaeffbf048
        name:
          type: string
          readOnly: false
          description: Name of the product reservation source in defined language(depends on language in http header of the API request)
          example: E-shop
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-09-09 12:32:42.143353'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the product reservation source
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
    Property:
      type: object
      description: Property structure
      properties:
        property_id:
          type: string
          readOnly: true
          description: The unique id of the property
          example: test
        name:
          type: string
          readOnly: false
          description: Name of the property
          example: Test
        description:
          type: string
          readOnly: false
          description: User defined description of the property
          example: test
        data_type:
          type: string
          readOnly: false
          description: 'Data type of the final value * Possible values: string / boolean / integer / date / timestamp / float / customized data types*'
          example: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/PropertyItem'
          readOnly: false
          description: 'List of possible values. Used for multivalued data types ( like enum, multiselect)'
        is_required:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: The settings whether the property is a required parameter of the specific entity
          example: false
        is_unique:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: The setting whether the property contains a unique value within the specific entity
          example: false
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-06-20 14:48:09'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the property
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
        - data_type
        - is_required
        - is_unique
    PropertyItem:
      type: object
      description: Property item structure
      properties:
        id:
          type: string
          readOnly: true
          description: The unique id of the property item
          example: 8fd73167342d0689c4c015320
        name:
          type: string
          readOnly: false
          description: Name of the property item
          example: '{"en":"evening","cz":"vecer"}'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the property item
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
    PropertyRecord:
      type: object
      description: Property record
      properties:
        property_record_id:
          type: string
          readOnly: true
          description: The unique id of the property record
          example: 'contact_person:8aa2049ac2f84952014d96bb23'
        property_id:
          type: string
          readOnly: false
          description: The unique id of the property
          example: contact_person
        property_name:
          type: string
          readOnly: false
          description: Name of the property
          example: Project contact person
        property_value:
          anyOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
            - type: array
              items: {}
            - type: object
          readOnly: false
          description: Value of the property
          example: []
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: null
      required:
        - property_id
        - property_value
    Purchase:
      type: object
      description: Purchase
      properties:
        purchase_id:
          type: string
          readOnly: true
          description: The unique id of the purchase
          example: 85c763ebcec2fa488f8857bee
        customer_id:
          type: string
          readOnly: false
          description: The unique id for the customer.
          example: 81ceb8582e28dbb7e71b7273b
        store_id:
          type: string
          readOnly: false
          description: The unique id of the store in CareCloud
          example: 8fd7316732d06899c4c015320
        external_purchase_id:
          type: string
          readOnly: false
          description: The external unique id of the purchase
          example: 2364
        payment_time:
          type: string
          readOnly: false
          description: 'Date and time of the purchase payment *(YYYY-MM-DD HH:MM:SS)*'
          example: '2012-11-22 20:57:04'
        items_count:
          type: integer
          readOnly: false
          description: Count of the purchase items
          example: 10
        purchase_items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseItem'
          readOnly: true
          description: List of all items of the purchase. Data is returned if query parameter purchase_items_extension has value true in the query string of the request.
        type_id:
          type: string
          readOnly: false
          description: Purchase type
          example: 86e05affc7a7abefd513ab400
        total_price:
          type: number
          format: float
          readOnly: false
          description: Total price of the purchase
          example: 60.51
        currency_id:
          type: string
          readOnly: false
          description: The unique id of the currency
          example: 86e05affc77abefcd513ab400
        card_number:
          type: string
          readOnly: false
          description: Purchasing customer card number
          example: 200190002218
        cashdesk_number:
          type: string
          readOnly: false
          description: Number of the cashdesk
          example: 2
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2012-11-22 20:56:05.333756'
      required:
        - customer_id
        - store_id
        - external_purchase_id
        - payment_time
        - items_count
        - type_id
        - total_price
        - currency_id
        - cashdesk_number
    Purchase-item-type:
      type: object
      description: Purchase item type structure
      properties:
        type_id:
          type: string
          readOnly: true
          description: The unique id of the purchase item type
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the purchase item type
          example: purchase in store
      required:
        - name
    Purchase-type:
      type: object
      description: Purchase type structure
      properties:
        type_id:
          type: string
          readOnly: true
          description: The unique id of the purchase type
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the purchase type
          example: Store purchase
      required:
        - name
    PurchaseConditions:
      type: object
      description: Structure contains purchase conditions of the status record
      properties:
        keep_status_turnover:
          type: array
          items:
            $ref: '#/components/schemas/QualificationTurnover'
          readOnly: true
          description: Missing turnover to keep current status in every active currency
        next_status_turnover:
          type: array
          items:
            $ref: '#/components/schemas/QualificationTurnover'
          readOnly: true
          description: Missing turnover to the next status in every active currency
        next_status_id:
          type: string
          readOnly: true
          description: Id of the following status.
          example: 83d1d11ea3884a5d33253fe214
    PurchaseItem:
      type: object
      description: Purchase item
      properties:
        purchase_item_id:
          type: string
          readOnly: true
          description: The unique id of the purchase item
          example: 84b757641df03b1529c2c7f66c
        product_id:
          type: string
          readOnly: false
          description: 'The unique id of the [product](#tag/Product)'
          example: 89b3b24b405f461c63d8fcaa0c
        external_id:
          type: string
          readOnly: false
          description: Identifier of the purchase item in external system
          example: null
        purchase_item_type_id:
          type: string
          readOnly: false
          description: Type of the purchase item
          example: 86e05affc7a7abefcd513ab400
        price:
          type: number
          format: float
          readOnly: false
          description: Price of the purchase item
          example: 1.99
        amount:
          type: number
          format: float
          readOnly: false
          description: Amount of the purchase item
          example: null
        vat_rate:
          type: number
          format: float
          readOnly: false
          description: The rate of an item VAT
          example: null
        additional_properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRecord'
          readOnly: false
          description: List of additional properties
      required:
        - product_id
        - purchase_item_type_id
        - price
        - amount
        - vat_rate
    QualificationTurnover:
      type: object
      description: Qualification turnover
      properties:
        currency_id:
          type: string
          readOnly: false
          description: The unique id of the currency
          example: 86e05affc7a7abefcd513ab400
        value:
          type: number
          format: float
          readOnly: false
          description: Value of turnover in the currency
          example: 1500
      required:
        - currency_id
        - value
    Recommendation:
      type: object
      description: Recommendation record
      properties:
        recommendation_id:
          type: string
          readOnly: true
          description: The unique id for the recommendation
          example: 89d3d4303c86e8c559fe51b18a
        name:
          type: string
          readOnly: false
          description: Name of a the recommendation
          example: Health recommendation
        brief_description:
          type: string
          readOnly: false
          description: Brief description of the recommendation
          example: Health recommendation for the customer
        detailed_description:
          type: string
          readOnly: false
          description: Detailed recommendation description
          example: Detail description of the recommendation
        content:
          type: string
          readOnly: false
          description: Content of the recommendation as a text
          example: '<h4>Lorem ipsum dolor sit amet, consectetur adipiscing elit. <br><\/h4><h5>Donec nisl libero, finibus malesuada finibus a, sollicitudin eget erat. <br><\/h5><p>Duis vitae pharetra mauris, id ornare urna. Ut in volutpat ipsum. Aliquam euismod nibh est. Ut maximus risus id malesuada egestas. Nunc nunc erat, porta id lectus at, semper pulvinar orci. Maecenas lobortis ex non euismod vulputate. Aliquam erat volutpat. Mauris mauris ligula, eleifend vitae lectus non, hendrerit pharetra leo. <br><\/p><p><br><\/p><ul><li>dsadsaddsadsad<\/li><li>dasdsadsadsad<\/li><li>dsadasdsadsa<br><\/li><\/ul><p><br><\/p><p>Duis vitae pharetra mauris, id ornare urna. Ut in volutpat ipsum. Aliquam euismod nibh est. Ut maximus risus id malesuada egestas. Nunc nunc erat, porta id lectus at, semper pulvinar orci. Maecenas lobortis ex non euismod vulputate. Aliquam erat volutpat. Mauris mauris ligula, eleifend vitae lectus non, hendrerit pharetra leo. <\/p> -a"'
        picture_urls:
          type: array
          items:
            type: string
            example: 'https://<projectURL>/health_recommendations_pictures/img_health_recommendations_16'
          readOnly: false
          description: URL addresses of the pictures of the recommendation
        web_url:
          type: string
          readOnly: false
          description: URL address of the recommendation website
          example: ''
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: 2020-04-16T09:53:08.000Z
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the recommendation
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - name
    RecommendedReward:
      type: object
      description: Recommended reward structure
      properties:
        code:
          type: string
          readOnly: true
          description: Code of the reward
          example: PTV138
        name:
          type: string
          readOnly: true
          description: Name of the reward
          example: SVK_wine
        reward_priority:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          readOnly: true
          description: 'Priority of the reward *1 - highest, 9 - lowest*'
          example: 8
        max_count:
          type: integer
          readOnly: true
          description: Maximum number of the reward applications
          example: null
        description:
          type: string
          readOnly: true
          description: Reward description
          example: SVK_wine
        reward_properties:
          type: object
          $ref: '#/components/schemas/RewardProperties'
          readOnly: true
          description: Properties of the reward
    Reward:
      type: object
      description: Reward structure
      properties:
        reward_id:
          type: string
          readOnly: true
          description: The unique id of the reward
          example: 83cfee22eabfbbb15a14815e30
        code:
          type: string
          readOnly: false
          description: Code of the reward
          example: null
        name:
          type: string
          readOnly: false
          description: Name of the reward
          example: Dessert+Caffe
        note:
          type: string
          readOnly: false
          description: Additional text
          example: ''
        subtitle:
          type: string
          readOnly: false
          description: Text of subtitle
          example: null
        points_cost:
          type: number
          format: float
          readOnly: false
          description: 'Number of points, that will be spent by the voucher redemption'
          example: 200
        valid_time_from:
          type: string
          readOnly: false
          description: 'Time the reward is valid from *(HH:MM:SS)*'
          example: null
        valid_time_to:
          type: string
          readOnly: false
          description: 'Time the reward is valid to *(HH:MM:SS)*'
          example: null
        reward_group:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: |
            The unique id of the reward group
            *Possible values: 0 - party time voucher / 1 - catalog voucher / 2 - campaign voucher*
          example: 0
        store_list:
          type: array
          items:
            $ref: '#/components/schemas/Store'
          readOnly: false
          description: List of the stores where the reward can be redeemed
        additional_properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRecord'
          readOnly: false
          description: Additional properties
        priority:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          readOnly: false
          description: Priority of the reward *1 is the highest priority*
          example: null
        image_urls:
          type: array
          items:
            type: string
            example: null
          readOnly: true
          description: List of reward image URL addresses
        reward_external_url:
          type: string
          readOnly: true
          description: External URL addresses
          example: null
        has_product_condition:
          type: boolean
          readOnly: true
          description: 'Parameter says, if there is product condition on reward'
          example: false
        has_group_condition:
          type: boolean
          readOnly: true
          description: 'Parameter says, if there is group condition on reward'
          example: true
        has_brand_condition:
          type: boolean
          readOnly: true
          description: 'Parameter says, if there is brand condition on reward'
          example: false
        is_automated:
          type: boolean
          readOnly: false
          description: 'Parameter says, if reward is automated or not. If reward is automated, means it''s applied by rules of the reward. Otherwise have to be applied manually'
          example: false
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2013-07-24 21:33:33'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the reward
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - code
        - name
        - reward_group
        - store_list
    RewardProperties:
      type: object
      description: Properties of the reward
      properties:
        image:
          type: string
          format: byte
          readOnly: true
          description: Image of the reward encoded in BASE64
          example: ''
        valid_time_from:
          type: string
          readOnly: true
          description: 'Time the reward is valid from *(HH:MM:SS)*'
          example: '00:00:00'
        valid_time_to:
          type: string
          readOnly: true
          description: 'Time the reward is valid to *(HH:MM:SS)*'
          example: '00:00:00'
    SearchResult:
      type: object
      description: Search result resource
      properties:
        search_result_string:
          type: string
          readOnly: false
          description: Full text search result
          example: Campari soda 2dc
        resource_id:
          type: string
          readOnly: false
          description: The unique id of the resource as a search result. The unique id depends on resource where the search action was processed
          example: 84b2d99e84c3d730beba523799
        flags:
          type: array
          items:
            $ref: '#/components/schemas/Flag'
          readOnly: false
          description: List of flags that identify result of the search
      required:
        - search_result_string
        - resource_id
    Segment:
      type: object
      description: Segment structure
      properties:
        segment_id:
          type: string
          readOnly: true
          description: The unique id of the segment
          example: 8dc1e66b44796af5cd377910e1
        name:
          type: string
          readOnly: false
          description: Name of the segment
          example: readers
        note:
          type: string
          readOnly: false
          description: Short description of the segment
          example: Customers that like to read more than 1 book a month
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-08-29 13:04:45'
      required:
        - name
    SegmentRecord:
      type: object
      description: Customer segment record
      properties:
        segment_id:
          type: string
          readOnly: false
          description: The unique id of the segment
          example: 83caed4c60c6be7e4392cc25ed
        customer_id:
          type: string
          readOnly: false
          description: The unique id of the customer
          example: 89ac83ca207a820c62c79bf03a
      required:
        - segment_id
        - customer_id
    Setup:
      type: object
      description: Setup of a client's device
      properties:
        language_id:
          type: string
          readOnly: false
          description: 'The unique id of the language by ISO 639-1 code from [languages resource](#tag/Languages)'
          example: en
        allowed_gps:
          type: boolean
          readOnly: false
          description: Permission to GPS tracking in the mobile application
          example: true
        allowed_notifications:
          type: boolean
          readOnly: false
          description: Permission to the mobile application notifications
          example: false
      required:
        - language_id
        - allowed_gps
        - allowed_notifications
    Skipass:
      type: object
      description: Skipass structure
      properties:
        skipass_id:
          type: string
          readOnly: false
          description: The unique id of the skipass
          example: 80a7be2e78aabc1454ca817265
        name:
          type: string
          readOnly: true
          description: Name of the skipass
          example: 1 Dňový Skipas - Akcia 7.1. - 22.1.2015
        customer_id:
          type: string
          readOnly: true
          description: The unique id of the customer
          example: null
        resort_name:
          type: string
          readOnly: true
          description: Name of the resort where is a skipass charged
          example: null
        customer_category_name:
          type: string
          readOnly: true
          description: Name of the customer category
          example: null
        external_order_id:
          type: string
          readOnly: true
          description: Id of an external order creaded in POS system
          example: d03df0e0-959a-11e4-a6ce-0050569b002b
        external_skipass_id:
          type: string
          readOnly: true
          description: 'External id of skipass. Structure can be different depends of POS system, that created skipass'
          example: 1-1760-61-107788
        skipass_type_id:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: false
          description: 'Type of the skipass *Possible values are: season ticket - 0/ one day ticket -1/ multiple day ticket - 2*'
          example: 1
        order_item_id:
          type: string
          readOnly: true
          description: Order id item represents relation between skipass and order item from carecloud e-shop
          example: 84947e1aa1ad6982cc8188d15c
        card_id:
          type: string
          readOnly: false
          description: Id of card used for charge skipasses
          example: 8c9fd120242ef646f477a5ed80
        created_at:
          type: string
          readOnly: true
          description: 'Date and time whe skipass was created in CareCloud *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-06 12:54:46'
        cancelled_at:
          type: string
          readOnly: true
          description: 'Date and time whe skipass was cancelled in CareCloud *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-09 22:38:48.088'
        charged_price:
          type: number
          format: float
          readOnly: true
          description: Price charged to POS system
          example: null
        product_id:
          type: string
          readOnly: true
          description: The unique id of the product
          example: null
        charge_date:
          type: string
          readOnly: true
          description: 'Date and time when skipass will be charged to the POS system *(YYYY-MM-DD HH:MM:SS)*'
          example: '2015-01-10 00:00:00'
        valid_from:
          type: string
          readOnly: true
          description: Date of the first day when customer can use skipass *(YYYY-MM-DD)*
          example: null
        valid_to:
          type: string
          readOnly: true
          description: Date of the last day when customer can use skipass *(YYYY-MM-DD)*
          example: null
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-08-29 13:04:45'
        state:
          type: integer
          enum:
            - 0
            - 1
          readOnly: false
          description: 'State of the event type *Possible values are: 0 - cancelled / 1- active*'
          example: 1
      required:
        - skipass_id
        - skipass_type_id
        - card_id
        - state
    SocialNetworkCredentials:
      type: object
      description: Customer Social network credentials
      properties:
        social_network_id:
          type: string
          description: The unique id of the social network
          readOnly: false
          example: twitter
        social_network_token:
          type: string
          description: Social network customer's token
          readOnly: false
          example: 38e123j1jedu12d1jnjqwd
      required:
        - social_network_id
        - social_network_token
    Status:
      type: object
      description: Status record
      properties:
        status_id:
          type: string
          readOnly: true
          description: The unique id of the status
          example: 86e05affc7a7abefcd513ab400
        name:
          type: string
          readOnly: false
          description: Name of the status
          example: Basic
        description:
          type: string
          readOnly: false
          description: Short description of the status
          example: null
        qualification_period:
          type: integer
          readOnly: false
          description: The period of time (in months) in which it is necessary to qualify for the status based on defined conditions.
          example: 12
        qualification_turnover:
          type: array
          items:
            $ref: '#/components/schemas/QualificationTurnover'
          readOnly: false
          description: The turnover necessary to be met to qualify for the status based on defined conditions.
        previous_status:
          type: string
          readOnly: false
          description: The previous status required to qualify for the next status based on defined conditions. The conditions are defined in parameters qualification_period and qualification_turnover.
          example: null
        next_status:
          type: string
          readOnly: false
          description: Id of the following status.
          example: 83d1d11ea3884a5d33253fe214
        validity_period:
          type: string
          readOnly: false
          description: Definition of the status validity period
          example: 2 years
        collection_points:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: Enable / disable points collection
          example: true
        payment_points:
          type: boolean
          enum:
            - true
            - false
          readOnly: false
          description: Enable / disable payment by points
          example: true
        qualification_type:
          type: integer
          readOnly: false
          description: |
            The status achieving principle
            *(0 - after creation of the account / 1 - manually / 2 - after the defined conditions are met)*
          example: 1
        discount:
          type: integer
          readOnly: false
          description: The basic loyalty discount
          example: 0
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-01-04 10:31:56'
      required:
        - name
        - description
        - validity_period
        - collection_points
        - payment_points
        - qualification_type
        - discount
    StatusRecord:
      type: object
      description: Customer status record
      properties:
        status_record_id:
          type: string
          readOnly: true
          description: The unique id of the status record
          example: 87ac34ef46f3858a4ece61fb43
        status_id:
          type: string
          readOnly: false
          description: The unique id of the status
          example: 86e05affc7a7abefcd513ab400
        customer_id:
          type: string
          readOnly: false
          description: The unique id of the customer
          example: 89ac83ca207a820c62c79bf03a
        valid_from:
          type: string
          readOnly: true
          description: 'Date and time of the record valid from *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-05-29 00:00:00'
        valid_to:
          type: string
          readOnly: true
          description: 'Date and time of the record valid to *(YYYY-MM-DD HH:MM:SS)*'
          example: '2021-05-28 23:59:59'
        purchase_conditions:
          $ref: '#/components/schemas/PurchaseConditions'
          readOnly: true
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-08-06 10:31:09'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the reward
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - status_id
        - customer_id
    Store:
      type: object
      description: Store structure
      properties:
        store_id:
          type: string
          readOnly: true
          description: The unique id of the store in CareCloud
          example: 86e05affc7a7abefcd513ab400
        store_code:
          type: string
          readOnly: false
          description: External code of the store
          example: ''
        name:
          type: string
          readOnly: false
          description: Name of the store
          example: Great Pub
        store_address:
          $ref: '#/components/schemas/Address'
        contact_email:
          type: string
          readOnly: false
          description: Contact email of the store
          example: ''
        manager_name:
          type: string
          readOnly: false
          description: Name of the store manager
          example: ''
        phone_number:
          type: string
          readOnly: false
          description: Phone number of the store with international prefix (420000000)
          example: ''
        partner_id:
          type: string
          readOnly: false
          description: The unique id for the partner
          example: 86e05affc7a7abefcd513ab400
        system_id:
          type: string
          readOnly: false
          description: The external unique id of the store in external system
          example: 2375303497
        gps_coordinates:
          $ref: '#/components/schemas/GPSCoordinates'
        url_address:
          type: string
          readOnly: false
          description: URL address of the store
          example: ''
        opening:
          type: array
          items:
            $ref: '#/components/schemas/OpeningDay'
          readOnly: false
          description: List of opening days
        image_urls:
          type: array
          items:
            type: string
            example: null
          readOnly: true
          description: A list of image URL addresses
        visibility_for_customer:
          type: integer
          enum:
            - 0
            - 1
          readOnly: true
          description: |
            State of the visibility for the customer
            *Possible values are: 0 - invisible / 1- visible*
          example: 1
        short_description:
          type: string
          readOnly: false
          description: Short description of the store
          example: fdsfdsfds
        description:
          type: string
          readOnly: false
          description: Long description of the store
          example: null
        registration_id:
          type: string
          readOnly: false
          description: Legal registration number of the store
          example: 123
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2018-12-19 16:12:56'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the store
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - store_id
        - store_code
        - name
        - partner_id
        - system_id
    StoreGroup:
      type: object
      description: Store group resource
      properties:
        store_group_id:
          type: string
          readOnly: true
          description: The unique id of the store group
          example: 8bed991c68a470e7aaeffbf048
        name:
          type: string
          readOnly: false
          description: Name of the store group
          example: Groceries
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2020-08-24 10:14:00'
      required:
        - name
    StoreGroupRecord:
      type: object
      description: Store group record resource
      properties:
        store_group_record_id:
          type: string
          readOnly: true
          description: The unique id for the store group record.
          example: 83d1d11ea3884a5d33253fe214
        store_id:
          type: string
          readOnly: false
          description: The unique id of the store.
          example: 8fd7316732d06899c4c015320
        store_group_id:
          type: string
          readOnly: false
          description: The unique id of the store group.
          example: 83d1d11ea3884a5d33253fe214
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2019-02-08 15:35:09'
      required:
        - store_id
        - store_group_id
    TimeInterval:
      type: object
      description: Time interval structure
      properties:
        from:
          type: string
          readOnly: false
          description: 'Time from *(HH:MM:SS)*'
          example: '08:00:00'
        to:
          type: string
          readOnly: false
          description: 'Time to *(HH:MM:SS)*'
          example: '15:30:00'
      required:
        - from
        - to
    User:
      type: object
      description: Information about logged in user
      properties:
        user_id:
          type: string
          readOnly: true
          description: The unique id of the user
          example: 838b73aacb5ac326cec4030c80
        login:
          type: string
          readOnly: false
          description: Login id of the user
          example: happy_user
        first_name:
          type: string
          readOnly: false
          description: First name of the user
          example: Happy
        last_name:
          type: string
          readOnly: false
          description: Last name of the user
          example: User
        email:
          type: string
          readOnly: false
          description: Email of the user
          example: happy_user@crmcarcloud.com
        phone:
          type: string
          readOnly: false
          description: Phone number of the user with international prefix (420000000)
          example: 420523828931
        user_role_id:
          type: string
          readOnly: true
          description: The unique id of the user role
          example: 86e05affc7a7befcd513ab400
        store_id:
          type: string
          readOnly: true
          description: The unique id of user's original store
          example: 86e05affc7a7abecd513ab400
      required:
        - login
        - first_name
        - last_name
        - email
    UserRole:
      type: object
      description: User role structure
      properties:
        user_role_id:
          type: string
          readOnly: true
          description: The unique id of the user role
          example: 86e05affc7a7befcd513ab400
        name:
          type: string
          readOnly: true
          description: Name of the user role
          example: Cashdesk
    UTM:
      type: object
      description: UTM structure for data from email campaign
      properties:
        utm_source:
          type: string
          readOnly: false
          description: 'Use utm_source to identify a search engine, newsletter name, or other sources. (Example: google)'
          example: google
        utm_medium:
          type: string
          readOnly: false
          description: 'Use utm_medium to identify a medium such as an email or cost-per-click. (Example: cpc)'
          example: cpc
        utm_campaign:
          type: string
          readOnly: false
          description: 'Used for keyword analysis. Use utm_campaign to identify a specific product promotion or strategic campaign. (Example: utm_campaign=spring_sale)'
          example: spring_sale
    Voucher:
      type: object
      description: Customer's voucher
      properties:
        voucher_id:
          type: string
          readOnly: true
          description: The unique id of the voucher
          example: 8bb7345976bbc9ed20e5083dd6
        customer_id:
          type: string
          readOnly: false
          description: The unique id of the customer.
          example: 81ceb8582e2d8dbb7e71b7273b
        store_id:
          type: string
          readOnly: false
          description: The unique id of the store where voucher was applied
          example: 86e05affc7a7abefcd513ab400
        code:
          type: string
          readOnly: false
          description: Code of the voucher
          example: w7TU7KfeE
        value:
          type: number
          format: float
          readOnly: false
          description: Value of the voucher when applied by the purchase
          example: 3.49
        applied_date:
          type: string
          readOnly: false
          description: 'Voucher application date *(YYYY-MM-DD HH:MM:SS)*'
          example: '2013-07-24 21:33:13'
        valid_from:
          type: string
          readOnly: false
          description: 'Date from the voucher is valid *(YYYY-MM-DD HH:MM:SS)*'
          example: null
        valid_to:
          type: string
          readOnly: false
          description: 'Date to the voucher is valid *(YYYY-MM-DD HH:MM:SS)*'
          example: null
        reward_group:
          type: string
          readOnly: false
          description: The unique id of the reward group
          example: 83cfee22eabfbbb15a14815e30
        reward:
          $ref: '#/components/schemas/Reward'
          readOnly: false
        last_change:
          type: string
          readOnly: true
          description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
          example: '2013-07-24 21:33:33'
        state:
          type: integer
          enum:
            - 0
            - 1
            - 2
          readOnly: true
          description: |
            State of the voucher
            *Possible values are: 0 - deleted / 1 - active / 2 - non active*
          example: 1
      required:
        - voucher_id
        - customer_id
        - store_id
        - code
        - value
        - valid_from
        - reward_group
        - reward
    BasicError:
      type: object
      required:
        - type
        - exception
        - title
        - detail
      properties:
        type:
          type: string
          example: 'about:blank'
        exception:
          type: string
          readOnly: false
          description: Content of the exception
          example: error_exception
        title:
          type: string
          readOnly: false
          description: The title of the error
          example: Error title
        detail:
          type: string
          readOnly: false
          description: The details of the error message
          example: null
  parameters:
    Accept-Language:
      name: Accept-Language
      in: header
      description: The unique id of the language code by ISO 639-1
      required: false
      schema:
        type: string
        default: 'cs, en-gb;q=0.8'
    count:
      name: count
      in: query
      description: The number of records to return.
      required: false
      schema:
        type: integer
        default: 100
        minimum: 1
      example: 1
    offset:
      name: offset
      in: query
      description: The number of records from a collection to skip.
      required: false
      schema:
        type: integer
        default: 0
      example: 2
    sort_field:
      name: sort_field
      in: query
      description: One of the query string parameters for sorting. *Response is sorted by the specified field.*
      required: false
      schema:
        type: string
      example: field_name
    sort_direction:
      name: sort_direction
      in: query
      description: Direction of sorting the response list.
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
      example: ASC
    searchMode:
      name: mode
      in: query
      description: |
        Mode of search results.

        *Possible values are: strict - return only 100% matching results*

        <p class="warning">⚠️ Caution: Strict mode makes all path parameters as required. For succesful result you have to set all parameters.</p>
      required: false
      schema:
        type: string
        enum:
          - strict
      example: strict
    last_change:
      name: last_change
      in: query
      description: 'Date and time of the last change *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2018-05-07 14:26:19.215774'
    is_valid:
      name: is_valid
      in: query
      description: '*in validity range - true / before or after validity range - false / no value - all*'
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
      example: true
    valid_from:
      name: valid_from
      in: query
      description: Date from where is valid already. *(YYYY-MM-DD)*
      required: false
      schema:
        type: string
      example: '2018-05-07'
    valid_from_full:
      name: valid_from
      in: query
      description: 'Date and time from where is valid already. *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2018-05-07 23:59:59'
    valid_to:
      name: valid_to
      in: query
      description: Date to where is valid still. *(YYYY-MM-DD)*
      required: false
      schema:
        type: string
      example: '2020-11-19'
    valid_to_full:
      name: valid_to
      in: query
      description: 'Date and time to where is valid still. *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      example: '2022-01-05 23:59:59'
    valid_now:
      name: valid_now
      in: query
      description: |
        Status validity. Just one status can be valid in the time.
        *Possible values are: True for valid status / False for status not valid*
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
      example: true
    date_from:
      name: date_from
      in: query
      description: Date (ISO 8601) start of the time interval *(YYYY-MM-DD)*
      required: false
      schema:
        type: string
      example: '2020-05-07'
    date_to:
      name: date_to
      in: query
      description: Date (ISO 8601) end of the time interval *(YYYY-MM-DD)*
      required: false
      schema:
        type: string
      example: '2021-05-07'
    name:
      name: name
      in: query
      description: Search record by name or a part of the name
      required: false
      schema:
        type: string
      example: Name
    value_type_id:
      name: value_type_id
      in: query
      description: 'Type of value (1 - percentage discount value, 2 - final price)'
      required: false
      schema:
        type: integer
        enum:
          - 1
          - 2
      example: 2
    user_id_path:
      name: user_id
      in: path
      required: true
      description: The unique id of the user
      schema:
        type: string
      example: 838b73aacb5ac326cec4030c80
    user_role_id_path:
      name: user_role_id
      in: path
      required: true
      description: The unique id of the user role
      schema:
        type: string
      example: 8bd4811006496e0b1788109b8
    email:
      name: email
      in: query
      description: Search by email
      required: false
      schema:
        type: string
      example: happy_customer@crmcarecloud.com
    phone:
      name: phone
      in: query
      description: Phone number with international prefix (420000000)
      required: false
      schema:
        type: string
      example: 420523828931
    login:
      name: login
      in: query
      description: Search by login.
      required: false
      schema:
        type: string
      example: happy_user
    first_name:
      name: first_name
      in: query
      description: Search by first name
      required: false
      schema:
        type: string
      example: John
    last_name:
      name: last_name
      in: query
      description: Search by last name
      required: false
      schema:
        type: string
      example: Smith
    birthdate:
      name: birthdate
      in: query
      description: 'Customer''s date of birth. *Possible values are: YYYY-MM-DD / DD.MM.YYYY*'
      required: false
      schema:
        type: string
      example: 985-02-12
    agreement_id_path:
      name: agreement_id
      in: path
      required: true
      description: The unique id of an agreement in CareCloud
      schema:
        type: string
      example: 81eaeea13b8984a169c490a325
    customer_id_path:
      name: customer_id
      in: path
      required: true
      description: The unique id of the customer
      schema:
        type: string
      example: 89ac83ca207a820c62c79bf03a
    customer_id:
      name: customer_id
      in: query
      required: false
      description: The unique id of the customer
      schema:
        type: string
      example: 89ac83ca207a820c62c79bf03a
    customer_id_required:
      name: customer_id
      in: query
      required: true
      description: The unique id of the customer
      schema:
        type: string
      example: 89ac83ca207a820c62c79bf03a
    external_id:
      name: external_id
      in: query
      required: false
      description: The unique external id. It may be id from the other system
      schema:
        type: string
      example: externalid
    customer_source_id:
      name: customer_source_id
      in: query
      required: false
      description: The unique id of the customer source. It identifies the system where the customer belongs or the customer account was created
      schema:
        type: string
      example: 8fdce3475560d56e95a6ab035r
    customer_type_id_arr:
      name: customer_type_id
      in: query
      required: false
      description: Select by list of customer types from customer-types resource. Logic OR is used between values
      schema:
        type: array
        items:
          type: string
    customer_type_id_path:
      name: customer_type_id
      in: path
      required: true
      description: The unique id of a customer type in CareCloud
      schema:
        type: string
      example: 86e05afc7a7abefcd513ab400
    card_id_path:
      name: card_id
      in: path
      description: The unique id for the card
      required: true
      schema:
        type: string
      example: 81a94c48474bc45c03d41f7016
    card_type_id_path:
      name: card_type_id
      in: path
      description: The unique id for the card type
      required: true
      schema:
        type: string
      example: 8bed991c68a470e7aaeffbf048
    card_number:
      name: card_number
      in: query
      description: Number of the customer card
      required: false
      schema:
        type: string
      example: 200120000290
    card_type_id:
      name: card_type_id
      in: query
      description: The unique id for the card type
      required: false
      schema:
        type: string
      example: 8bed991c68a470e7aaeffbf048
    state:
      name: state
      in: query
      description: |
        State of the card
        *Possible values are: 0 - blocked / 1 - active*
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
      example: 1
    property_record_id_path:
      name: property_record_id
      in: path
      required: true
      description: The unique id for the property record
      schema:
        type: string
      allowReserved: true
      example: 'contact_person:8aa2049ac2f84952014d96bb23'
    interest_record_id_path:
      name: interest_record_id
      in: path
      required: true
      description: The unique id for the interest record
      schema:
        type: string
      example: 87d934c86a6303f5fb4d1214fb
    voucher_id_path:
      name: voucher_id
      in: path
      description: The unique id for the voucher
      required: true
      schema:
        type: string
      example: 8fbccbdba315e6240b07f239ba
    is_applied:
      name: is_applied
      in: query
      description: |
        Filter by voucher application and reservation.
        *Possible values: true - all applied or reserved vouchers / false - all vouchers that have not been applied yet or that are not reserved actually / no value - all vouchers*
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
      example: true
    voucher_code:
      name: code
      in: query
      description: Unique code of the voucher
      required: false
      schema:
        type: string
      allowReserved: true
      example: w7TU7KfeE
    reward_id_path:
      name: reward_id
      in: path
      description: The unique id for the reward
      required: true
      schema:
        type: string
      example: null
    reward_property_id_path:
      name: reward_property_id
      in: path
      description: The unique id for the reward property
      required: true
      schema:
        type: string
      allowReserved: true
      example: subtitle
    reward_code:
      name: code
      in: query
      description: Code of the reward
      required: false
      schema:
        type: string
      allowReserved: true
      example: null
    is_automated:
      name: is_automated
      in: query
      description: |
        Filter of the automated rewards
        *Possible values: true - returns all automated rewards / false - returns all non automated rewards / no value - all rewards(filter is not applied)*
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
      example: true
    reward_group:
      name: reward_group
      in: query
      description: |
        The unique id for the reward group
        *Possible values: 0 - cash desk reward (party time reward) / 1 - catalog reward / 2 - campaign reward*
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
          - 2
      example: 1
    without_stores:
      name: without_stores
      in: query
      description: 'If true, resource call returns rewards without list of stores. If false, or not set resource returns default strucutre.'
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
      example: true
    reward_store_id:
      name: store_id
      in: query
      description: The unique id for the store where customer can apply the reward
      required: false
      schema:
        type: string
      example: 8fd7316732d06899c4c015320
    customer_external_application_id_path:
      name: customer_external_application_id
      in: path
      description: The unique id of a customer external application in CareCloud
      required: true
      schema:
        type: string
      example: 81eaeea13b894a169c490a325
    customer_property_id_path:
      name: customer_property_id
      in: path
      description: The unique id for the customer property
      required: true
      schema:
        type: string
      example: profession
    customer_relation_type_id_path:
      name: customer_relation_type_id
      in: path
      description: The unique id of a customer relation type in CareCloud
      required: true
      schema:
        type: string
      example: 8bed991c68a470e7aaefff048
    campaign_id_path:
      name: campaign_id
      in: path
      description: The unique id for the campaign in CareCloud
      required: true
      schema:
        type: string
      example: 81eaeea13b8984a169c490a325
    display_in:
      name: display_in
      in: query
      description: Place to display campaign product.
      required: false
      schema:
        type: string
        enum:
          - web
          - cash desk
          - api
      example: null
    type_id:
      name: type_id
      in: query
      description: Type of the customer for a campaign product.
      required: false
      schema:
        type: array
        items:
          type: string
      example: null
    campaign_store_id:
      name: store_id
      in: query
      description: 'Parameter filters all campaig products from [store](#tag/Stores) by store id'
      required: false
      schema:
        type: string
      example: 8fd7316732d06899c4c015320
    campaign_product_id_path:
      name: campaign_product_id
      in: path
      description: The unique id for the campaign product in CareCloud
      required: true
      schema:
        type: string
      example: 81eaeea13b8984a169c
    currency_id_path:
      name: currency_id
      in: path
      description: The unique id of a currency in CareCloud
      required: true
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    event_id_path:
      name: event_id
      in: path
      description: The unique id for the event
      required: true
      schema:
        type: string
      example: 8bed991c68a470e7aaeffbf048
    event_type_id:
      name: event_type_id
      in: query
      description: The unique id of the event type
      required: false
      schema:
        type: string
      example: 8bed991c68a470e7aaeffbf048
    text_id:
      name: text_id
      in: query
      description: Text id of an event group
      required: false
      schema:
        type: string
      example: shopping_cart
    event_group_id_path:
      name: event_group_id
      in: path
      description: The unique id of the event group
      required: true
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    event_property_id_path:
      name: event_property_id
      in: path
      description: The unique id for the event property
      required: true
      schema:
        type: string
      example: account_registration_contact_source
    event_type_id_path:
      name: event_type_id
      in: path
      description: The unique id for the event type
      required: true
      schema:
        type: string
      example: 81dcd5807157297ad7d668e61
    interest_id_path:
      name: interest_id
      in: path
      description: The unique id for the interest
      required: true
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    message_id_path:
      name: message_id
      in: path
      description: The unique id of the message
      required: true
      schema:
        type: string
      example: 89ce2a1b9b01f5c939fb1e20cd
    message_template_id_path:
      name: message_template_id
      in: path
      description: The unique id for the message template
      required: true
      schema:
        type: string
      example: 82de12eb8b138791e678fd11c3
    contact:
      name: contact
      in: query
      description: Email of phone number that was used as a contact in message
      required: false
      schema:
        type: string
      allowReserved: true
      example: happy_customer@crmcarecloud.com
    communication_channel_id:
      name: communication_channel_id
      in: query
      description: 'The unique id of the communication channel. *Possible values are: 1 - email / 2- SMS / 4 - PUSH notification (Apple or Google)/ 5 - internal system notification*'
      required: false
      schema:
        type: integer
        enum:
          - 1
          - 2
          - 4
          - 5
      example: 1
    send_time_from:
      name: send_time_from
      in: query
      description: 'Start date and time of the time interval *YYYY-MM-DD HH:MM:SS*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2015-01-05 1:00:00'
    send_time_to:
      name: send_time_to
      in: query
      description: 'End date and time of the time interval *YYYY-MM-DD HH:MM:SS*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2015-01-05 23:59:00'
    order_id_path:
      name: order_id
      in: path
      description: The unique id of the order
      required: true
      schema:
        type: string
      example: 8bed991c68a470e7aabed9e048
    partner_id_path:
      name: partner_id
      in: path
      description: The unique id for the partner
      required: true
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    point_id_path:
      name: point_id
      in: path
      description: The unique id for the point record
      required: true
      schema:
        type: string
      example: 8bcd4f6d0e1432tfc472632e1d
    point_reservation_id_path:
      name: point_reservation_id
      in: path
      description: The unique id of the point reservations
      required: true
      schema:
        type: string
      example: 8bcd4f6d0e1432tfc472632e1d
    point_type_id_path:
      name: point_type_id
      in: path
      description: The unique id of a point type
      required: true
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    point_type_id:
      name: point_type_id
      in: query
      description: The unique id of a point type
      required: false
      schema:
        type: string
      example: 86e05affc7a7abefcd513ab400
    create_point_time_from:
      name: create_point_time_from
      in: query
      description: 'Date and time from of the create point record *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: null
    create_point_time_to:
      name: create_point_time_to
      in: query
      description: 'Date and time to of the create point record *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: null
    pointRes_external_id:
      name: external_id
      in: query
      description: The external id of the point reservation
      required: false
      schema:
        type: string
      example: 123459
    product_id_path:
      name: product_id
      in: path
      description: The unique id for the product
      required: true
      schema:
        type: string
      example: 89bdacbffb5c82f2c52cb9ae8f
    reservable_product_id_path:
      name: reservable_product_id
      in: path
      description: The unique id for the reservable product
      required: true
      schema:
        type: string
      example: 89bdacbffb5c82f2c52cb9ae8f
    product_brand_id_path:
      name: product_brand_id
      in: path
      description: The unique id for the product brand
      required: true
      schema:
        type: string
      example: 83d1d11ea3884a5d33253fe214
    product_group_id_path:
      name: product_group_id
      in: path
      description: The unique id for the product group
      required: true
      schema:
        type: string
      example: 87c4c16c6d82d44ab7f50d537e
    product_property_id_path:
      name: product_property_id
      in: path
      description: The unique id for the product group
      required: true
      schema:
        type: string
      example: 87c4c16c6d82d44ab7f50d537e
    product_reservation_id_path:
      name: product_reservation_id
      in: path
      description: The unique id for a product reservation
      required: true
      schema:
        type: string
      example: 81d503b99cc748b3ca189383ad
    product_reservation_source_id_path:
      name: product_reservation_source_id
      in: path
      description: The unique id of an product reservation source in CareCloud
      required: true
      schema:
        type: string
      example: 8bed991c68a470e7aaeffbf048
    product_code:
      name: code
      in: query
      description: Code of the product
      required: false
      schema:
        type: string
      example: 649
    product_group_code:
      name: code
      in: query
      description: Code of the product group
      required: false
      schema:
        type: string
      example: 649
    external_type_code:
      name: external_type_code
      in: query
      description: 'Every product can have more than one external id depends of the bussiness requirements. This paramter allows to pick from witch list of external ids you want to choose. For the list of external type codes please contact you account manager. If the parameter is not set, API uses as a default value GLOBAL'
      required: false
      schema:
        type: string
        default: GLOBAL
    reservation_code:
      name: reservation_code
      in: query
      description: Code of the reservation
      required: false
      schema:
        type: string
      example: 10
    reservation_state:
      name: reservation_state
      in: query
      description: |
        Actual state of the product reservation.
        *Possible values: 0 - Canceled / 1 - Entered / 2 - Accepted / 3 - Ready / 4 - Delivered / 5 - In progress / 6 - Not Picked up / 7 - Ordered / 8 - Being solved /*
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 2
          - 4
          - 5
          - 6
          - 7
          - 8
      example: 2
    purchase_id_path:
      name: purchase_id
      in: path
      description: The unique id for the purchase
      required: true
      schema:
        type: string
      example: 8bc3btbb6f14765b3025cea06c
    purchase_type_id:
      name: type_id
      in: query
      description: Purchase type
      required: false
      schema:
        type: string
      example: 86e05affc7a7abefd513ab400
    payment_time_from:
      name: payment_time_from
      in: query
      description: 'Date and time from of the purchase payment *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2021-01-05 00:00:00'
    payment_time_to:
      name: payment_time_to
      in: query
      description: 'Date and time to of the purchase payment *(YYYY-MM-DD HH:MM:SS)*'
      required: false
      schema:
        type: string
      allowReserved: true
      example: '2021-10-01 23:59:00'
    purchase_items_extension:
      name: purchase_items_extension
      in: query
      description: 'If true, resource returns extended response with purchase items. If false, the resource won''t be extended. If the parameter is not set, the default value is false'
      required: false
      schema:
        type: boolean
        enum:
          - true
          - false
        default: false
    recommendation_id_path:
      name: recommendation_id
      in: path
      description: The unique id for a recommendation
      required: true
      schema:
        type: string
      example: 8ad8b2b701199684f1222961d6
    product_id_list:
      name: product_id_list
      in: query
      required: false
      description: List of the product ids. Initial products for the recommendation engine.
      schema:
        type: array
        items:
          type: string
    cart_product_ids:
      name: cart_product_ids
      in: query
      required: false
      description: List of the product ids in customer's shopping cart
      schema:
        type: array
        items:
          type: string
    cart_product_ids_required:
      name: cart_product_ids
      in: query
      required: true
      description: List of the product ids in customer's shopping cart
      schema:
        type: array
        items:
          type: string
    segment_id_path:
      name: segment_id
      in: path
      required: true
      description: The unique id for the segment
      schema:
        type: string
      example: 8dc1e66b44796af5cd377910e1
    skipass_id_path:
      name: skipass_id
      in: path
      description: The unique id of the skipass
      required: true
      schema:
        type: string
      example: 80a7be2e78aabc1454ca817265
    pos_id:
      name: pos_id
      in: query
      required: false
      description: 'Id of POS system for ski tickets. *Possible values are: skidata - 6 / axess - 9 / base - 11*'
      schema:
        type: integer
        enum:
          - 6
          - 9
          - 11
    external_order_id:
      name: external_order_id
      in: query
      required: false
      description: "string\tId of an external order creaded in POS system"
      schema:
        type: string
      example: null
    skipass_name:
      name: name
      in: query
      required: false
      description: "name string\tName of the charged skipass (product name is used from resource products)"
      schema:
        type: string
      example: null
    resort_name:
      name: resort_name
      in: query
      required: false
      description: "string\tName of the resort where is a skipass charged"
      schema:
        type: string
      example: null
    customer_category_name:
      name: customer_category_name
      in: query
      required: false
      description: Name of the customer category
      schema:
        type: string
      example: null
    skipass_card_id:
      name: card_id
      in: query
      required: false
      description: Id of card used for charge skipasses
      schema:
        type: string
      example: 8c97533b621490a0b211419086
    skipass_type_id:
      name: skipass_type_id
      in: query
      required: false
      description: |
        Type of the skipass
        *Possible values are: season ticket - 0/ one day ticket -1/ multiple day ticket - 2*
      schema:
        type: integer
        enum:
          - 0
          - 1
          - 2
      example: 1
    skipass_state:
      name: state
      in: query
      required: false
      description: 'State of the skipass *Possible values are: canceled skipass - 0 / valid skipass -1*'
      schema:
        type: integer
        enum:
          - 0
          - 1
      example: 1
    external_skipass_id:
      name: external_skipass_id
      in: query
      required: false
      description: 'External id of skipass. Structure can be different depends of POS system, that created skipass'
      schema:
        type: string
      example: null
    is_cancelled:
      name: is_cancelled
      in: query
      required: false
      description: |
        Filter for canceled skipasses.
        *Possible values: true - all cancelled skipasses / false - all non cancelled skipasses / no value - all skipasses*
      schema:
        type: boolean
        enum:
          - true
          - false
      example: false
    status_id_path:
      name: status_id
      in: path
      description: The unique id for the status
      required: true
      schema:
        type: string
      example: 86e05affc77abefc513ab400
    store_id_path:
      name: store_id
      in: path
      description: The unique id of the store in CareCloud
      required: true
      schema:
        type: string
      example: 8fd7316732d06899c4c015320
    store_group_id_path:
      name: store_group_id
      in: path
      description: The unique id for the store group
      required: true
      schema:
        type: string
      example: 8bed991c6a470e7aaeffbf048
    store_property_id_path:
      name: store_property_id
      in: path
      description: The unique id for the store property
      required: true
      schema:
        type: string
      example: provided_services
    store_id:
      name: store_id
      in: query
      description: The unique id of the store in CareCloud
      required: false
      schema:
        type: string
      example: 8fd7316732d06899c4c015320
    visible_for_customer:
      name: visible_for_customer
      in: query
      description: 'State of the visibility for the customer *Possible values are: 0 - invisible / 1- visible. If query string is not used, return both.*'
      required: false
      schema:
        type: integer
        enum:
          - 0
          - 1
      example: 1
    property_id:
      name: property_id
      in: query
      required: false
      description: 'Store property id from resource [store-properties](#tag/Store-properties). The parameter determines property, which is used to filter stores by their properties. The parameter must be used in combination with property_value otherwise is ignored in the request.'
      schema:
        type: string
      example: provided_services
    property_value:
      name: property_value
      in: query
      required: false
      description: 'Store property record value from resource [/stores/{store_id}/property-records](#operation/getSubStoreProperties) or [store-properties](#tag/Store-properties) in case of datatype with multiple values . Parameter filters stores depends of store property record value. The parameter must be used in combination with property_id otherwise is ignored in the request.'
      schema:
        type: string
      example: null
    token_id_path:
      name: token_id
      in: path
      description: Client's application token
      required: true
      schema:
        type: string
      example: d9aacfc5eebfae1e9fdc7f20694c2ca105dff986f1b8176a6740c027db56a325913f
    external_application_id:
      name: external_application_id
      in: query
      required: true
      description: 'Id of external application. For id of external application, please contact your account manager or look to resource [customer-external-applications](#tag/Customer-external-applications)'
      schema:
        type: string
      example: 89d1a6111b3fb6e74665d948
    token_type:
      name: token_type
      in: query
      required: true
      description: 'Parameter set witch token type should be generated. *Possible values: 1- alphanumeric, 2- numeric*'
      schema:
        type: integer
        enum:
          - 1
          - 2
        default: 1
      example: 2
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: |-
        ## HTTP Bearer authentication
        Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name "Bearer authentication" can be understood as "give access to the bearer of this token." The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:

        ```http request
        Authorization: Bearer <token>
        ```

        ### Enterprise interface HTTP Bearer authentication

        As described below, for authentication through HTTP Bearer, you will need a bearer token.

        In REST API, you can get this token as a response from a successful call of [the user login action method](#operation/postUserLogin).
        <p class="warning">⚠️ Bearer token validity has a default value of 7 hours. Every project can customize the validity of the bearer token.</p>

        For a successful login, you will need the ID of the external application and user credentials.
        If you already have all information, you can continue to [Authentication process](#authentication-process). If you miss any parameters, please check [User credential](#user-credentials) and [External applications](#external-applications) sections.


        #### User credentials

        If you miss user credentials, you can create or get them in section Users of CDP administration.
        Complete user setup is located in:
        ```text
        System configuration > User authorization > Users
        ```

        <img src="img/user_add.png">

        If you want to use a user from CDP CareCloud, you need to set the 'User Group' option in the user form to value `webservice`.

        #### External applications
        The external application represents an application that wants to/ already communicate with CPD CareCloud REST API. Every system needs to be identified, and that's why we need to know the external application ID.
        It could be one of the following examples:
        - a mobile app for the customer's purchase overview
        - e-shop that uses customers data
        - production system that wants to synchronize customer purchases

        If you need an external application ID, you can get it in CDP administration in the section External applications
        ```text
        System configuration > External applications
        ```

        <img src="img/external_app_overview.png"> <br/>


        Or you can also add a new external application to the system by the following form in the same section:


        <img src="img/external_app_add.png"> <br/>


        For CDP REST API use, please get an Encoded ID.

        #### Authentication process
        If you have all mandatory parameters, you can continue with the user login API call.

        User login request :

        ```http request
        POST https://<projectURL>/rest-api/enterprise-interface/v1.0/users/actions/login
        Content-Type: application/json
        Accept-Language: cs, en-gb;q=0.8

        {
          "user_external_application_id": "4d9495b4e723e7a",
          "login": "example@crmcarecloud.com",
          "password": "password_example"
        }
        ```

        Bearer token in response to the method:

        ```json
        {
          "data":{
            "bearer_token": "09359095c5da43c7ae11e710eabce49"
          }
        }
        ```


        After you successfully get your bearer token, please add it to every REST API calls in the Enterprise interface with the following syntax:

        ```http request
        GET https://<projectURL>/rest-api/customer-interface/v1.0/customers
        Content-Type: application/json
        Accept-Language: cs, en-gb;q=0.8
        Authorization: Bearer 09359095c5da43c7ae11e710eabce49
        ```

        Response:

        ```http request
        HTTP/1.1 200 OK
        Date: Mon, 22 Jul 2019 11:54:39 GMT
        Content-Type: application/json; charset=utf-8
        ```

        ```json
        {
            "data": {
                "customers": [
                    {
                        "customer_id": "8ea6abece4cd0a4ded0a29f093",
                        "personal_information": {
                            "gender": 1,
                            "first_name": "John",
                            "last_name": "Smith",
                            "birthdate": "985-02-12",
                            "email": "happy_customer@crmcarecloud.com",
                            "phone": "420523828931",
                            "language_id": "en",
                            "store_id": "8bed991c68a4",
                            "address": {
                                "address1": "Old Town Square",
                                "address2": "34",
                                "address3": "",
                                "address4": "",
                                "address5": "",
                                "address6": "",
                                "address7": "",
                                "zip": "11000",
                                "city": "Prague 1",
                                "country_code": "cz"
                            },
                            "agreement": {
                                "agreement_gtc": 1,
                                "agreement_profiling": 1,
                                "agreement_marketing_communication": 1,
                                "custom_agreements": [
                                    {
                                        "agreement_id": "custom_agreement_id",
                                        "agreement_value": 2
                                    }
                                ]
                            }
                        },
                        "last_change": "2019-06-23 11:47:22",
                        "state": 1
                    }
                ],
                "total_items": 1
            }
        }
        ```
    basicAuth:
      type: http
      scheme: basic
      description: |-
        ## HTTP Basic autentication
        HTTP Basic authentication method (https://en.wikipedia.org/wiki/Basic_access_authentication) has to be used to login to API successfully. There are two options to authenticate depending on your kind of integration:

        -   Enterprise interface authentication  (credentials are necessary to access the data )
        -   Customer interface authentication  (mobile/web app integration with partial free access to data)

        ### Enterprise interface authentication

        <p class="warning">HTTP BASIC authentication is deprecated for the Enterprise interface. Please look at HTTP Bearer authentification for the Enterprise interface.</p>

        User name and password have to be used for Enterprise interface authentication. Credentials are BASE64 encoded during HTTP basic authentication. HTTP header will look like the example below.

        Before BASE64 encoding:

        ```http request
        Content-Type: application/json
        Accept-Language: cs, en-gb;q=0.8
        Authorization: Basic <user name>:<password>
        ```

        After BASE64 encoding:

        ```http request
        Content-Type: application/json
        Accept-Language: cs, en-gb;q=0.8
        Authorization: Basic Zm9vOmJhcg==
        ```

        The password is composed of two parts:

        -   User password hashed with MD5 algorithm
        -   Time in format YYYYMMDDHH (UTC)

        All parts are connected and hashed with SHA-256 algorithm (implementation in PHP):

        ```http request
        hash('sha256',md5("password")."2019040112");
        ```

        Result:

        ```http request
        string(64) "c0c0d92061deb13bf34570e513229368979708efcdbc80b8d881e7ef03461a6c"
        ```

        ### Customer interface authentication

        User name and token (provided by resource tokens) are used for Customer interface client authentication. Credentials are BASE64 encoded. HTTP header will look like the example below.

        Before BASE64 encoding:

        ```http request
        GET / HTTP/1.1
        Host: project.carecloud.cz
        Authorization: Basic <user name>:69dfa909171f15783d92877d86d114f8c49a50a8e15bdf4c280ba46cdb3a3d49c1288218
        ```

        After BASE64 encoding:

        ```http request
        GET / HTTP/1.1
        Host: project.carecloud.cz
        Authorization: Basic Zm9vOmJhcg==
        ```
